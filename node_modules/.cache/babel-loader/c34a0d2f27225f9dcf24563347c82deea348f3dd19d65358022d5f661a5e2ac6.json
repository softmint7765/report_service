{"ast":null,"code":"import _slicedToArray from \"C:/Users/91798/Documents/IPMsg/AutoSave/React admin/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport var usePickerState = function usePickerState(props, valueManager) {\n  var onAccept = props.onAccept,\n    onChange = props.onChange,\n    value = props.value,\n    closeOnSelect = props.closeOnSelect;\n  var utils = useUtils();\n  var _useOpenState = useOpenState(props),\n    isOpen = _useOpenState.isOpen,\n    setIsOpen = _useOpenState.setIsOpen;\n  var parsedDateValue = React.useMemo(function () {\n    return valueManager.parseInput(utils, value);\n  }, [valueManager, utils, value]);\n  var _React$useState = React.useState(parsedDateValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    lastValidDateValue = _React$useState2[0],\n    setLastValidDateValue = _React$useState2[1];\n  var _React$useState3 = React.useState(function () {\n      return {\n        committed: parsedDateValue,\n        draft: parsedDateValue,\n        resetFallback: parsedDateValue\n      };\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    dateState = _React$useState4[0],\n    setDateState = _React$useState4[1];\n  var setDate = React.useCallback(function (params) {\n    setDateState(function (prev) {\n      switch (params.action) {\n        case 'setAll':\n        case 'acceptAndClose':\n          {\n            return {\n              draft: params.value,\n              committed: params.value,\n              resetFallback: params.value\n            };\n          }\n        case 'setCommitted':\n          {\n            return _extends({}, prev, {\n              draft: params.value,\n              committed: params.value\n            });\n          }\n        case 'setDraft':\n          {\n            return _extends({}, prev, {\n              draft: params.value\n            });\n          }\n        default:\n          {\n            return prev;\n          }\n      }\n    });\n    if (params.forceOnChangeCall || !params.skipOnChangeCall && !valueManager.areValuesEqual(utils, dateState.committed, params.value)) {\n      onChange(params.value);\n    }\n    if (params.action === 'acceptAndClose') {\n      setIsOpen(false);\n      if (onAccept && !valueManager.areValuesEqual(utils, dateState.resetFallback, params.value)) {\n        onAccept(params.value);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen, dateState, utils, valueManager]);\n  React.useEffect(function () {\n    if (utils.isValid(parsedDateValue)) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [utils, parsedDateValue]);\n  React.useEffect(function () {\n    if (isOpen) {\n      // Update all dates in state to equal the current prop value\n      setDate({\n        action: 'setAll',\n        value: parsedDateValue,\n        skipOnChangeCall: true\n      });\n    }\n  }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n  // Set the draft and committed date to equal the new prop value.\n\n  if (!valueManager.areValuesEqual(utils, dateState.committed, parsedDateValue)) {\n    setDate({\n      action: 'setCommitted',\n      value: parsedDateValue,\n      skipOnChangeCall: true\n    });\n  }\n  var wrapperProps = React.useMemo(function () {\n    return {\n      open: isOpen,\n      onClear: function onClear() {\n        // Reset all date in state to the empty value and close picker.\n        setDate({\n          value: valueManager.emptyValue,\n          action: 'acceptAndClose',\n          // force `onChange` in cases like input (value) === `Invalid date`\n          forceOnChangeCall: !valueManager.areValuesEqual(utils, value, valueManager.emptyValue)\n        });\n      },\n      onAccept: function onAccept() {\n        // Set all date in state to equal the current draft value and close picker.\n        setDate({\n          value: dateState.draft,\n          action: 'acceptAndClose',\n          // force `onChange` in cases like input (value) === `Invalid date`\n          forceOnChangeCall: !valueManager.areValuesEqual(utils, value, parsedDateValue)\n        });\n      },\n      onDismiss: function onDismiss() {\n        // Set all dates in state to equal the last committed date.\n        // e.g. Reset the state to the last committed value.\n        setDate({\n          value: dateState.committed,\n          action: 'acceptAndClose'\n        });\n      },\n      onCancel: function onCancel() {\n        // Set all dates in state to equal the last accepted date and close picker.\n        // e.g. Reset the state to the last accepted value\n        setDate({\n          value: dateState.resetFallback,\n          action: 'acceptAndClose'\n        });\n      },\n      onSetToday: function onSetToday() {\n        // Set all dates in state to equal today and close picker.\n        setDate({\n          value: valueManager.getTodayValue(utils),\n          action: 'acceptAndClose'\n        });\n      }\n    };\n  }, [setDate, isOpen, utils, dateState, valueManager, value, parsedDateValue]); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    isMobileKeyboardViewOpen = _React$useState6[0],\n    setMobileKeyboardViewOpen = _React$useState6[1];\n  var pickerProps = React.useMemo(function () {\n    return {\n      parsedValue: dateState.draft,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: function toggleMobileKeyboardView() {\n        return setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: function onDateChange(newDate, wrapperVariant) {\n        var selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n        switch (selectionState) {\n          case 'shallow':\n            {\n              // Update the `draft` state but do not fire `onChange`\n              return setDate({\n                action: 'setDraft',\n                value: newDate,\n                skipOnChangeCall: true\n              });\n            }\n          case 'partial':\n            {\n              // Update the `draft` state and fire `onChange`\n              return setDate({\n                action: 'setDraft',\n                value: newDate\n              });\n            }\n          case 'finish':\n            {\n              if (closeOnSelect != null ? closeOnSelect : wrapperVariant === 'desktop') {\n                // Set all dates in state to equal the new date and close picker.\n                return setDate({\n                  value: newDate,\n                  action: 'acceptAndClose'\n                });\n              } // Updates the `committed` state and fire `onChange`\n\n              return setDate({\n                value: newDate,\n                action: 'setCommitted'\n              });\n            }\n          default:\n            {\n              throw new Error('MUI: Invalid selectionState passed to `onDateChange`');\n            }\n        }\n      }\n    };\n  }, [setDate, isMobileKeyboardViewOpen, dateState.draft, closeOnSelect]);\n  var handleInputChange = React.useCallback(function (newParsedValue, keyboardInputValue) {\n    var cleanParsedValue = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, newParsedValue) : newParsedValue;\n    onChange(cleanParsedValue, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  var inputProps = React.useMemo(function () {\n    return {\n      onChange: handleInputChange,\n      open: isOpen,\n      rawValue: value,\n      openPicker: function openPicker() {\n        return setIsOpen(true);\n      }\n    };\n  }, [handleInputChange, isOpen, value, setIsOpen]);\n  var pickerState = {\n    pickerProps: pickerProps,\n    inputProps: inputProps,\n    wrapperProps: wrapperProps\n  };\n  React.useDebugValue(pickerState, function () {\n    return {\n      MuiPickerState: {\n        dateState: dateState,\n        other: pickerState\n      }\n    };\n  });\n  return pickerState;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}