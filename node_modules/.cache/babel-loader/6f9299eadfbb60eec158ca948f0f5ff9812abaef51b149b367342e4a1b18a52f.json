{"ast":null,"code":"'use strict';\n\nvar brackets = require('expand-brackets');\n\n/**\n * Extglob compilers\n */\n\nmodule.exports = function (extglob) {\n  function star() {\n    if (typeof extglob.options.star === 'function') {\n      return extglob.options.star.apply(this, arguments);\n    }\n    if (typeof extglob.options.star === 'string') {\n      return extglob.options.star;\n    }\n    return '.*?';\n  }\n\n  /**\n   * Use `expand-brackets` compilers\n   */\n\n  extglob.use(brackets.compilers);\n  extglob.compiler\n\n  /**\n   * Escaped: \"\\\\*\"\n   */.set('escape', function (node) {\n    return this.emit(node.val, node);\n  })\n\n  /**\n   * Dot: \".\"\n   */.set('dot', function (node) {\n    return this.emit('\\\\' + node.val, node);\n  })\n\n  /**\n   * Question mark: \"?\"\n   */.set('qmark', function (node) {\n    var val = '[^\\\\\\\\/.]';\n    var prev = this.prev();\n    if (node.parsed.slice(-1) === '(') {\n      var ch = node.rest.charAt(0);\n      if (ch !== '!' && ch !== '=' && ch !== ':') {\n        return this.emit(val, node);\n      }\n      return this.emit(node.val, node);\n    }\n    if (prev.type === 'text' && prev.val) {\n      return this.emit(val, node);\n    }\n    if (node.val.length > 1) {\n      val += '{' + node.val.length + '}';\n    }\n    return this.emit(val, node);\n  })\n\n  /**\n   * Plus: \"+\"\n   */.set('plus', function (node) {\n    var prev = node.parsed.slice(-1);\n    if (prev === ']' || prev === ')') {\n      return this.emit(node.val, node);\n    }\n    var ch = this.output.slice(-1);\n    if (!this.output || /[?*+]/.test(ch) && node.parent.type !== 'bracket') {\n      return this.emit('\\\\+', node);\n    }\n    if (/\\w/.test(ch) && !node.inside) {\n      return this.emit('+\\\\+?', node);\n    }\n    return this.emit('+', node);\n  })\n\n  /**\n   * Star: \"*\"\n   */.set('star', function (node) {\n    var prev = this.prev();\n    var prefix = prev.type !== 'text' && prev.type !== 'escape' ? '(?!\\\\.)' : '';\n    return this.emit(prefix + star.call(this, node), node);\n  })\n\n  /**\n   * Parens\n   */.set('paren', function (node) {\n    return this.mapVisit(node.nodes);\n  }).set('paren.open', function (node) {\n    var capture = this.options.capture ? '(' : '';\n    switch (node.parent.prefix) {\n      case '!':\n      case '^':\n        return this.emit(capture + '(?:(?!(?:', node);\n      case '*':\n      case '+':\n      case '?':\n      case '@':\n        return this.emit(capture + '(?:', node);\n      default:\n        {\n          var val = node.val;\n          if (this.options.bash === true) {\n            val = '\\\\' + val;\n          } else if (!this.options.capture && val === '(' && node.parent.rest[0] !== '?') {\n            val += '?:';\n          }\n          return this.emit(val, node);\n        }\n    }\n  }).set('paren.close', function (node) {\n    var capture = this.options.capture ? ')' : '';\n    switch (node.prefix) {\n      case '!':\n      case '^':\n        var prefix = /^(\\)|$)/.test(node.rest) ? '$' : '';\n        var str = star.call(this, node);\n\n        // if the extglob has a slash explicitly defined, we know the user wants\n        // to match slashes, so we need to ensure the \"star\" regex allows for it\n        if (node.parent.hasSlash && !this.options.star && this.options.slash !== false) {\n          str = '.*?';\n        }\n        return this.emit(prefix + ('))' + str + ')') + capture, node);\n      case '*':\n      case '+':\n      case '?':\n        return this.emit(')' + node.prefix + capture, node);\n      case '@':\n        return this.emit(')' + capture, node);\n      default:\n        {\n          var val = (this.options.bash === true ? '\\\\' : '') + ')';\n          return this.emit(val, node);\n        }\n    }\n  })\n\n  /**\n   * Text\n   */.set('text', function (node) {\n    var val = node.val.replace(/[\\[\\]]/g, '\\\\$&');\n    return this.emit(val, node);\n  });\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}