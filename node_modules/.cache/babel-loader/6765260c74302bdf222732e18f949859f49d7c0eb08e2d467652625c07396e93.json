{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"autoFocus\", \"className\", \"parsedValue\", \"DateInputProps\", \"isMobileKeyboardViewOpen\", \"onDateChange\", \"onViewChange\", \"openTo\", \"orientation\", \"showToolbar\", \"toggleMobileKeyboardView\", \"ToolbarComponent\", \"toolbarFormat\", \"toolbarPlaceholder\", \"toolbarTitle\", \"views\", \"dateRangeIcon\", \"timeIcon\", \"hideTabs\", \"classes\"];\nimport * as React from 'react';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useViews } from '../../hooks/useViews';\nimport { ClockPicker } from '../../../ClockPicker/ClockPicker';\nimport { CalendarPicker } from '../../../CalendarPicker/CalendarPicker';\nimport { KeyboardDateInput } from '../KeyboardDateInput';\nimport { useIsLandscape } from '../../hooks/useIsLandscape';\nimport { WrapperVariantContext } from '../wrappers/WrapperVariantContext';\nimport { PickerViewRoot } from '../PickerViewRoot';\nimport { useFocusManagement } from './useFocusManagement';\nimport { getCalendarOrClockPickerUtilityClass } from './calendarOrClockPickerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root'],\n    mobileKeyboardInputView: ['mobileKeyboardInputView']\n  };\n  return composeClasses(slots, getCalendarOrClockPickerUtilityClass, classes);\n};\nexport var MobileKeyboardInputView = styled('div', {\n  name: 'MuiCalendarOrClockPicker',\n  slot: 'MobileKeyboardInputView',\n  overridesResolver: function overridesResolver(_, styles) {\n    return styles.mobileKeyboardInputView;\n  }\n})({\n  padding: '16px 24px'\n});\nvar PickerRoot = styled('div', {\n  name: 'MuiCalendarOrClockPicker',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(_, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var ownerState = _ref.ownerState;\n  return _extends({\n    display: 'flex',\n    flexDirection: 'column'\n  }, ownerState.isLandscape && {\n    flexDirection: 'row'\n  });\n});\nvar MobileKeyboardTextFieldProps = {\n  fullWidth: true\n};\nvar isDatePickerView = function isDatePickerView(view) {\n  return view === 'year' || view === 'month' || view === 'day';\n};\nvar isTimePickerView = function isTimePickerView(view) {\n  return view === 'hours' || view === 'minutes' || view === 'seconds';\n};\nvar warnedOnceNotValidOpenTo = false;\nexport function CalendarOrClockPicker(inProps) {\n  var _other$components, _other$componentsProp;\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCalendarOrClockPicker'\n  });\n  var autoFocus = props.autoFocus,\n    parsedValue = props.parsedValue,\n    DateInputProps = props.DateInputProps,\n    isMobileKeyboardViewOpen = props.isMobileKeyboardViewOpen,\n    onDateChange = props.onDateChange,\n    onViewChange = props.onViewChange,\n    openTo = props.openTo,\n    orientation = props.orientation,\n    showToolbar = props.showToolbar,\n    toggleMobileKeyboardView = props.toggleMobileKeyboardView,\n    _props$ToolbarCompone = props.ToolbarComponent,\n    ToolbarComponent = _props$ToolbarCompone === void 0 ? function () {\n      return null;\n    } : _props$ToolbarCompone,\n    toolbarFormat = props.toolbarFormat,\n    toolbarPlaceholder = props.toolbarPlaceholder,\n    toolbarTitle = props.toolbarTitle,\n    views = props.views,\n    dateRangeIcon = props.dateRangeIcon,\n    timeIcon = props.timeIcon,\n    hideTabs = props.hideTabs,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var TabsComponent = (_other$components = other.components) == null ? void 0 : _other$components.Tabs;\n  var isLandscape = useIsLandscape(views, orientation);\n  var wrapperVariant = React.useContext(WrapperVariantContext);\n  var classes = useUtilityClasses(props);\n  var toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n  var showTabs = !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;\n  var handleDateChange = React.useCallback(function (newDate, selectionState) {\n    onDateChange(newDate, wrapperVariant, selectionState);\n  }, [onDateChange, wrapperVariant]);\n  var handleViewChange = React.useCallback(function (newView) {\n    if (isMobileKeyboardViewOpen) {\n      toggleMobileKeyboardView();\n    }\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  }, [isMobileKeyboardViewOpen, onViewChange, toggleMobileKeyboardView]);\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidOpenTo && !views.includes(openTo)) {\n      console.warn(\"MUI: `openTo=\\\"\".concat(openTo, \"\\\"` is not a valid prop.\"), \"It must be an element of `views=[\\\"\".concat(views.join('\", \"'), \"\\\"]`.\"));\n      warnedOnceNotValidOpenTo = true;\n    }\n  }\n  var _useViews = useViews({\n      view: undefined,\n      views: views,\n      openTo: openTo,\n      onChange: handleDateChange,\n      onViewChange: handleViewChange\n    }),\n    openView = _useViews.openView,\n    setOpenView = _useViews.setOpenView,\n    handleChangeAndOpenNext = _useViews.handleChangeAndOpenNext;\n  var _useFocusManagement = useFocusManagement({\n      autoFocus: autoFocus,\n      openView: openView\n    }),\n    focusedView = _useFocusManagement.focusedView,\n    setFocusedView = _useFocusManagement.setFocusedView;\n  return /*#__PURE__*/_jsxs(PickerRoot, {\n    ownerState: {\n      isLandscape: isLandscape\n    },\n    className: classes.root,\n    children: [toShowToolbar && /*#__PURE__*/_jsx(ToolbarComponent, _extends({}, other, {\n      views: views,\n      isLandscape: isLandscape,\n      parsedValue: parsedValue,\n      onChange: handleDateChange,\n      setOpenView: setOpenView,\n      openView: openView,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat,\n      toolbarPlaceholder: toolbarPlaceholder,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView\n    })), showTabs && !!TabsComponent && /*#__PURE__*/_jsx(TabsComponent, _extends({\n      dateRangeIcon: dateRangeIcon,\n      timeIcon: timeIcon,\n      view: openView,\n      onChange: setOpenView\n    }, (_other$componentsProp = other.componentsProps) == null ? void 0 : _other$componentsProp.tabs)), /*#__PURE__*/_jsx(PickerViewRoot, {\n      children: isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n        className: classes.mobileKeyboardInputView,\n        children: /*#__PURE__*/_jsx(KeyboardDateInput, _extends({}, DateInputProps, {\n          ignoreInvalidInputs: true,\n          disableOpenPicker: true,\n          TextFieldProps: MobileKeyboardTextFieldProps\n        }))\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [isDatePickerView(openView) && /*#__PURE__*/_jsx(CalendarPicker, _extends({\n          autoFocus: autoFocus,\n          date: parsedValue,\n          onViewChange: setOpenView,\n          onChange: handleChangeAndOpenNext,\n          view: openView // Unclear why the predicate `isDatePickerView` does not imply the casted type\n          ,\n\n          views: views.filter(isDatePickerView),\n          focusedView: focusedView,\n          onFocusedViewChange: setFocusedView\n        }, other)), isTimePickerView(openView) && /*#__PURE__*/_jsx(ClockPicker, _extends({}, other, {\n          autoFocus: autoFocus,\n          date: parsedValue,\n          view: openView // Unclear why the predicate `isDatePickerView` does not imply the casted type\n          ,\n\n          views: views.filter(isTimePickerView),\n          onChange: handleChangeAndOpenNext,\n          onViewChange: setOpenView,\n          showViewSwitcher: wrapperVariant === 'desktop'\n        }))]\n      })\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}