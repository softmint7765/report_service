{"ast":null,"code":"'use strict';\n\nvar os = require('os');\nvar equals = require('buffer-equal');\nvar cr = new Buffer('\\r\\n');\nvar nl = new Buffer('\\n');\n\n/**\n * Append a buffer to another buffer ensuring to preserve line ending characters.\n *\n * ```js\n * console.log([appendBuffer(new Buffer('abc\\r\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\r\\ndef\\r\\n' ]\n *\n * console.log([appendBuffer(new Buffer('abc\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef\\n' ]\n *\n * // uses os.EOL when a line ending is not found\n * console.log([appendBuffer(new Buffer('abc'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef' ]\n * * ```\n * @param  {Buffer} `buf` Buffer that will be used to check for an existing line ending. The suffix is appended to this.\n * @param  {Buffer} `suffix` Buffer that will be appended to the buf.\n * @return {Buffer} Final Buffer\n * @api public\n */\n\nmodule.exports = function appendBuffer(buf, suffix) {\n  if (!suffix || !suffix.length) {\n    return buf;\n  }\n  var eol;\n  if (equals(buf.slice(-2), cr)) {\n    eol = cr;\n  } else if (equals(buf.slice(-1), nl)) {\n    eol = nl;\n  } else {\n    return Buffer.concat([buf, new Buffer(os.EOL), new Buffer(suffix)]);\n  }\n  return Buffer.concat([buf, new Buffer(suffix), eol]);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}