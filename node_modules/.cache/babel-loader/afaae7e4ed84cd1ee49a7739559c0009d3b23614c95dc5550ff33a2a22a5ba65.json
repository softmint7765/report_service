{"ast":null,"code":"'use strict';\n\nvar os = require('os');\nvar path = require('path');\nvar through = require('through2');\nvar fo = require('../file-operations');\nvar isWindows = os.platform() === 'win32';\nfunction linkStream(optResolver) {\n  function linkFile(file, enc, callback) {\n    var isRelative = optResolver.resolve('relativeSymlinks', file);\n    var flags = fo.getFlags({\n      overwrite: optResolver.resolve('overwrite', file),\n      append: false\n    });\n    if (!isWindows) {\n      // On non-Windows, just use 'file'\n      return createLinkWithType('file');\n    }\n    fo.reflectStat(file.symlink, file, onReflectTarget);\n    function onReflectTarget(statErr) {\n      if (statErr && statErr.code !== 'ENOENT') {\n        return callback(statErr);\n      }\n      // If target doesn't exist, the vinyl will still carry the target stats.\n      // Let's use those to determine which kind of dangling link to create.\n\n      // This option provides a way to create a Junction instead of a\n      // Directory symlink on Windows. This comes with the following caveats:\n      // * NTFS Junctions cannot be relative.\n      // * NTFS Junctions MUST be directories.\n      // * NTFS Junctions must be on the same file system.\n      // * Most products CANNOT detect a directory is a Junction:\n      //    This has the side effect of possibly having a whole directory\n      //    deleted when a product is deleting the Junction directory.\n      //    For example, JetBrains product lines will delete the entire contents\n      //    of the TARGET directory because the product does not realize it's\n      //    a symlink as the JVM and Node return false for isSymlink.\n\n      // This function is Windows only, so we don't need to check again\n      var useJunctions = optResolver.resolve('useJunctions', file);\n      var dirType = useJunctions ? 'junction' : 'dir';\n      var type = !statErr && file.isDirectory() ? dirType : 'file';\n      createLinkWithType(type);\n    }\n    function createLinkWithType(type) {\n      // This is done after prepare() to use the adjusted file.base property\n      if (isRelative && type !== 'junction') {\n        file.symlink = path.relative(file.base, file.symlink);\n      }\n      var opts = {\n        flags: flags,\n        type: type\n      };\n      fo.symlink(file.symlink, file.path, opts, onSymlink);\n    }\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return callback(symlinkErr);\n      }\n      fo.reflectLinkStat(file.path, file, onReflectLink);\n    }\n    function onReflectLink(reflectErr) {\n      if (reflectErr) {\n        return callback(reflectErr);\n      }\n      callback(null, file);\n    }\n  }\n  return through.obj(linkFile);\n}\nmodule.exports = linkStream;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}