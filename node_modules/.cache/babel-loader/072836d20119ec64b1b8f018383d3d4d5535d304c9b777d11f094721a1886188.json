{"ast":null,"code":"import _slicedToArray from \"C:/Users/91798/Documents/IPMsg/AutoSave/React admin/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nexport var useOpenState = function useOpenState(_ref) {\n  var open = _ref.open,\n    onOpen = _ref.onOpen,\n    onClose = _ref.onClose;\n  var isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    openState = _React$useState2[0],\n    setIsOpenState = _React$useState2[1]; // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(function () {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  var setIsOpen = React.useCallback(function (newIsOpen) {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen: setIsOpen\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}