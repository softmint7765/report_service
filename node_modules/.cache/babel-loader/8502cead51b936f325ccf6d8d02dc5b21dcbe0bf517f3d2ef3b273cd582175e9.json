{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { Clock } from './Clock';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { buildDeprecatedPropsWarning } from '../internals/utils/warning';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { PickersArrowSwitcher } from '../internals/components/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { getClockPickerUtilityClass } from './clockPickerClasses';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root'],\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getClockPickerUtilityClass, classes);\n};\nvar ClockPickerRoot = styled(PickerViewRoot, {\n  name: 'MuiClockPicker',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'flex',\n  flexDirection: 'column'\n});\nvar ClockPickerArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiClockPicker',\n  slot: 'ArrowSwitcher',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.arrowSwitcher;\n  }\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\nvar deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');\n/**\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/x/api/date-pickers/clock-picker/)\n */\n\nexport var ClockPicker = /*#__PURE__*/React.forwardRef(function ClockPicker(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiClockPicker'\n  });\n  var _props$ampm = props.ampm,\n    ampm = _props$ampm === void 0 ? false : _props$ampm,\n    _props$ampmInClock = props.ampmInClock,\n    ampmInClock = _props$ampmInClock === void 0 ? false : _props$ampmInClock,\n    autoFocus = props.autoFocus,\n    components = props.components,\n    componentsProps = props.componentsProps,\n    date = props.date,\n    disableIgnoringDatePartForTimeValidation = props.disableIgnoringDatePartForTimeValidation,\n    getClockLabelTextProp = props.getClockLabelText,\n    getHoursClockNumberTextProp = props.getHoursClockNumberText,\n    getMinutesClockNumberTextProp = props.getMinutesClockNumberText,\n    getSecondsClockNumberTextProp = props.getSecondsClockNumberText,\n    leftArrowButtonTextProp = props.leftArrowButtonText,\n    maxTime = props.maxTime,\n    minTime = props.minTime,\n    _props$minutesStep = props.minutesStep,\n    minutesStep = _props$minutesStep === void 0 ? 1 : _props$minutesStep,\n    rightArrowButtonTextProp = props.rightArrowButtonText,\n    shouldDisableTime = props.shouldDisableTime,\n    showViewSwitcher = props.showViewSwitcher,\n    onChange = props.onChange,\n    view = props.view,\n    _props$views = props.views,\n    views = _props$views === void 0 ? ['hours', 'minutes'] : _props$views,\n    openTo = props.openTo,\n    onViewChange = props.onViewChange,\n    className = props.className,\n    disabled = props.disabled,\n    readOnly = props.readOnly;\n  deprecatedPropsWarning({\n    leftArrowButtonText: leftArrowButtonTextProp,\n    rightArrowButtonText: rightArrowButtonTextProp,\n    getClockLabelText: getClockLabelTextProp,\n    getHoursClockNumberText: getHoursClockNumberTextProp,\n    getMinutesClockNumberText: getMinutesClockNumberTextProp,\n    getSecondsClockNumberText: getSecondsClockNumberTextProp\n  });\n  var localeText = useLocaleText();\n  var leftArrowButtonText = leftArrowButtonTextProp != null ? leftArrowButtonTextProp : localeText.openPreviousView;\n  var rightArrowButtonText = rightArrowButtonTextProp != null ? rightArrowButtonTextProp : localeText.openNextView;\n  var getClockLabelText = getClockLabelTextProp != null ? getClockLabelTextProp : localeText.clockLabelText;\n  var getHoursClockNumberText = getHoursClockNumberTextProp != null ? getHoursClockNumberTextProp : localeText.hoursClockNumberText;\n  var getMinutesClockNumberText = getMinutesClockNumberTextProp != null ? getMinutesClockNumberTextProp : localeText.minutesClockNumberText;\n  var getSecondsClockNumberText = getSecondsClockNumberTextProp != null ? getSecondsClockNumberTextProp : localeText.secondsClockNumberText;\n  var _useViews = useViews({\n      view: view,\n      views: views,\n      openTo: openTo,\n      onViewChange: onViewChange,\n      onChange: onChange\n    }),\n    openView = _useViews.openView,\n    setOpenView = _useViews.setOpenView,\n    nextView = _useViews.nextView,\n    previousView = _useViews.previousView,\n    handleChangeAndOpenNext = _useViews.handleChangeAndOpenNext;\n  var now = useNow();\n  var utils = useUtils();\n  var dateOrMidnight = React.useMemo(function () {\n    return date || utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);\n  }, [date, now, utils]);\n  var _useMeridiemMode = useMeridiemMode(dateOrMidnight, ampm, handleChangeAndOpenNext),\n    meridiemMode = _useMeridiemMode.meridiemMode,\n    handleMeridiemChange = _useMeridiemMode.handleMeridiemChange;\n  var isTimeDisabled = React.useCallback(function (rawValue, viewType) {\n    var isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    var containsValidTime = function containsValidTime(_ref) {\n      var start = _ref.start,\n        end = _ref.end;\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n      return true;\n    };\n    var isValidValue = function isValidValue(value) {\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (value % step !== 0) {\n        return false;\n      }\n      if (shouldDisableTime) {\n        return !shouldDisableTime(value, viewType);\n      }\n      return true;\n    };\n    switch (viewType) {\n      case 'hours':\n        {\n          var value = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          var dateWithNewHours = utils.setHours(dateOrMidnight, value);\n          var start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          var end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start: start,\n            end: end\n          }) || !isValidValue(value);\n        }\n      case 'minutes':\n        {\n          var dateWithNewMinutes = utils.setMinutes(dateOrMidnight, rawValue);\n          var _start = utils.setSeconds(dateWithNewMinutes, 0);\n          var _end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start: _start,\n            end: _end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n      case 'seconds':\n        {\n          var dateWithNewSeconds = utils.setSeconds(dateOrMidnight, rawValue);\n          var _start2 = dateWithNewSeconds;\n          var _end2 = dateWithNewSeconds;\n          return !containsValidTime({\n            start: _start2,\n            end: _end2\n          }) || !isValidValue(rawValue);\n        }\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, dateOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils]);\n  var selectedId = useId();\n  var viewProps = React.useMemo(function () {\n    switch (openView) {\n      case 'hours':\n        {\n          var handleHoursChange = function handleHoursChange(value, isFinish) {\n            var valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);\n            handleChangeAndOpenNext(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);\n          };\n          return {\n            onChange: handleHoursChange,\n            value: utils.getHours(dateOrMidnight),\n            children: getHourNumbers({\n              date: date,\n              utils: utils,\n              ampm: ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: getHoursClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return disabled || isTimeDisabled(value, 'hours');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n      case 'minutes':\n        {\n          var minutesValue = utils.getMinutes(dateOrMidnight);\n          var handleMinutesChange = function handleMinutesChange(value, isFinish) {\n            handleChangeAndOpenNext(utils.setMinutes(dateOrMidnight, value), isFinish);\n          };\n          return {\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: getMinutesClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return disabled || isTimeDisabled(value, 'minutes');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n      case 'seconds':\n        {\n          var secondsValue = utils.getSeconds(dateOrMidnight);\n          var handleSecondsChange = function handleSecondsChange(value, isFinish) {\n            handleChangeAndOpenNext(utils.setSeconds(dateOrMidnight, value), isFinish);\n          };\n          return {\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils: utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: getSecondsClockNumberText,\n              isDisabled: function isDisabled(value) {\n                return disabled || isTimeDisabled(value, 'seconds');\n              },\n              selectedId: selectedId\n            })\n          };\n        }\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [openView, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, handleChangeAndOpenNext, dateOrMidnight, isTimeDisabled, selectedId, disabled]);\n  var ownerState = props;\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(ClockPickerRoot, {\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: [showViewSwitcher && /*#__PURE__*/_jsx(ClockPickerArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      leftArrowButtonText: leftArrowButtonText,\n      rightArrowButtonText: rightArrowButtonText,\n      components: components,\n      componentsProps: componentsProps,\n      onLeftClick: function onLeftClick() {\n        return setOpenView(previousView);\n      },\n      onRightClick: function onRightClick() {\n        return setOpenView(nextView);\n      },\n      isLeftDisabled: !previousView,\n      isRightDisabled: !nextView,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus,\n      date: date,\n      ampmInClock: ampmInClock,\n      type: openView,\n      ampm: ampm,\n      getClockLabelText: getClockLabelText,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId,\n      disabled: disabled,\n      readOnly: readOnly\n    }, viewProps))]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ClockPicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  /**\n   * Set to `true` if focus should be moved to clock picker.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Selected date @DateIOType.\n   */\n  date: PropTypes.any,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @template TDate\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n  /**\n   * Get clock number aria-text for hours.\n   * @param {string} hours The hours to format.\n   * @returns {string} the formatted hours text.\n   * @default (hours: string) => `${hours} hours`\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getHoursClockNumberText: PropTypes.func,\n  /**\n   * Get clock number aria-text for minutes.\n   * @param {string} minutes The minutes to format.\n   * @returns {string} the formatted minutes text.\n   * @default (minutes: string) => `${minutes} minutes`\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getMinutesClockNumberText: PropTypes.func,\n  /**\n   * Get clock number aria-text for seconds.\n   * @param {string} seconds The seconds to format.\n   * @returns {string} the formatted seconds text.\n   * @default (seconds: string) => `${seconds} seconds`\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getSecondsClockNumberText: PropTypes.func,\n  /**\n   * Left arrow icon aria-label text.\n   * @default 'open previous view'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Initially open view.\n   * @default 'hours'\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Right arrow icon aria-label text.\n   * @default 'open next view'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n  showViewSwitcher: PropTypes.bool,\n  /**\n   * Controlled open view.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n  /**\n   * Views for calendar picker.\n   * @default ['hours', 'minutes']\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}