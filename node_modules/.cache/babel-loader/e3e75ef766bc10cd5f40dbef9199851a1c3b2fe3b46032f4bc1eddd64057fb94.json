{"ast":null,"code":"import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The step must be equal to or greater than 1\r\n * @throws {TypeError} 1 argument required\r\n * @returns {Date[]} the array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n * @throws {RangeError} `options.step` must be a number equal to or greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal to or greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n  return dates;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}