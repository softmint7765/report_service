{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcFocusDate = calcFocusDate;\nexports.findNextRangeIndex = findNextRangeIndex;\nexports.getMonthDisplayRange = getMonthDisplayRange;\nexports.generateStyles = generateStyles;\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _addDays = _interopRequireDefault(require(\"date-fns/addDays\"));\nvar _differenceInCalendarMonths = _interopRequireDefault(require(\"date-fns/differenceInCalendarMonths\"));\nvar _differenceInCalendarDays = _interopRequireDefault(require(\"date-fns/differenceInCalendarDays\"));\nvar _endOfWeek = _interopRequireDefault(require(\"date-fns/endOfWeek\"));\nvar _startOfWeek = _interopRequireDefault(require(\"date-fns/startOfWeek\"));\nvar _endOfMonth = _interopRequireDefault(require(\"date-fns/endOfMonth\"));\nvar _startOfMonth = _interopRequireDefault(require(\"date-fns/startOfMonth\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction calcFocusDate(currentFocusedDate, props) {\n  var shownDate = props.shownDate,\n    date = props.date,\n    months = props.months,\n    ranges = props.ranges,\n    focusedRange = props.focusedRange,\n    displayMode = props.displayMode; // find primary date according the props\n\n  var targetInterval;\n  if (displayMode === 'dateRange') {\n    var range = ranges[focusedRange[0]] || {};\n    targetInterval = {\n      start: range.startDate,\n      end: range.endDate\n    };\n  } else {\n    targetInterval = {\n      start: date,\n      end: date\n    };\n  }\n  targetInterval.start = (0, _startOfMonth.default)(targetInterval.start || new Date());\n  targetInterval.end = (0, _endOfMonth.default)(targetInterval.end || targetInterval.start);\n  var targetDate = targetInterval.start || targetInterval.end || shownDate || new Date(); // initial focus\n\n  if (!currentFocusedDate) return shownDate || targetDate; // // just return targetDate for native scrolled calendars\n  // if (props.scroll.enabled) return targetDate;\n\n  if ((0, _differenceInCalendarMonths.default)(targetInterval.start, targetInterval.end) > months) {\n    // don't change focused if new selection in view area\n    return currentFocusedDate;\n  }\n  return targetDate;\n}\nfunction findNextRangeIndex(ranges) {\n  var currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  var nextIndex = ranges.findIndex(function (range, i) {\n    return i > currentRangeIndex && range.autoFocus !== false && !range.disabled;\n  });\n  if (nextIndex !== -1) return nextIndex;\n  return ranges.findIndex(function (range) {\n    return range.autoFocus !== false && !range.disabled;\n  });\n}\nfunction getMonthDisplayRange(date, dateOptions, fixedHeight) {\n  var startDateOfMonth = (0, _startOfMonth.default)(date, dateOptions);\n  var endDateOfMonth = (0, _endOfMonth.default)(date, dateOptions);\n  var startDateOfCalendar = (0, _startOfWeek.default)(startDateOfMonth, dateOptions);\n  var endDateOfCalendar = (0, _endOfWeek.default)(endDateOfMonth, dateOptions);\n  if (fixedHeight && (0, _differenceInCalendarDays.default)(endDateOfCalendar, startDateOfCalendar) <= 34) {\n    endDateOfCalendar = (0, _addDays.default)(endDateOfCalendar, 7);\n  }\n  return {\n    start: startDateOfCalendar,\n    end: endDateOfCalendar,\n    startDateOfMonth: startDateOfMonth,\n    endDateOfMonth: endDateOfMonth\n  };\n}\nfunction generateStyles(sources) {\n  if (!sources.length) return {};\n  var generatedStyles = sources.filter(function (source) {\n    return Boolean(source);\n  }).reduce(function (styles, styleSource) {\n    Object.keys(styleSource).forEach(function (key) {\n      styles[key] = (0, _classnames.default)(styles[key], styleSource[key]);\n    });\n    return styles;\n  }, {});\n  return generatedStyles;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}