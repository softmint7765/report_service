{"ast":null,"code":"import _defineProperty from \"D:/Repo/softmint-react-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport fabClasses, { getFabUtilityClass } from './fabClasses';\nimport styled from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n    variant = ownerState.variant,\n    classes = ownerState.classes,\n    size = ownerState.size;\n  var slots = {\n    root: ['root', variant, \"size\".concat(capitalize(size)), color === 'inherit' && 'colorInherit', color === 'primary' && 'primary', color === 'secondary' && 'secondary']\n  };\n  return composeClasses(slots, getFabUtilityClass, classes);\n};\nvar FabRoot = styled(ButtonBase, {\n  name: 'MuiFab',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.root, styles[ownerState.variant], styles[\"size\".concat(capitalize(ownerState.size))], ownerState.color === 'inherit' && styles.colorInherit, ownerState.color === 'primary' && styles.primary, ownerState.color === 'secondary' && styles.secondary];\n  }\n})(function (_ref) {\n  var _extends2;\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _extends({}, theme.typography.button, (_extends2 = {\n    minHeight: 36,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {\n      duration: theme.transitions.duration.short\n    }),\n    borderRadius: '50%',\n    padding: 0,\n    minWidth: 0,\n    width: 56,\n    height: 56,\n    boxShadow: theme.shadows[6],\n    '&:active': {\n      boxShadow: theme.shadows[12]\n    },\n    color: theme.palette.getContrastText(theme.palette.grey[300]),\n    backgroundColor: theme.palette.grey[300],\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A100,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.grey[300]\n      },\n      textDecoration: 'none'\n    }\n  }, _defineProperty(_extends2, \"&.\".concat(fabClasses.focusVisible), {\n    boxShadow: theme.shadows[6]\n  }), _defineProperty(_extends2, \"&.\".concat(fabClasses.disabled), {\n    color: theme.palette.action.disabled,\n    boxShadow: theme.shadows[0],\n    backgroundColor: theme.palette.action.disabledBackground\n  }), _extends2), ownerState.size === 'small' && {\n    width: 40,\n    height: 40\n  }, ownerState.size === 'medium' && {\n    width: 48,\n    height: 48\n  }, ownerState.variant === 'extended' && {\n    borderRadius: 48 / 2,\n    padding: '0 16px',\n    width: 'auto',\n    minHeight: 'auto',\n    minWidth: 48,\n    height: 48\n  }, ownerState.variant === 'extended' && ownerState.size === 'small' && {\n    width: 'auto',\n    padding: '0 8px',\n    borderRadius: 34 / 2,\n    minWidth: 34,\n    height: 34\n  }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {\n    width: 'auto',\n    padding: '0 16px',\n    borderRadius: 40 / 2,\n    minWidth: 40,\n    height: 40\n  }, ownerState.color === 'inherit' && {\n    color: 'inherit'\n  });\n}, function (_ref2) {\n  var theme = _ref2.theme,\n    ownerState = _ref2.ownerState;\n  return _extends({}, ownerState.color === 'primary' && {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.primary.main\n      }\n    }\n  }, ownerState.color === 'secondary' && {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.secondary.main\n      }\n    }\n  });\n});\nvar Fab = /*#__PURE__*/React.forwardRef(function Fab(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiFab'\n  });\n  var children = props.children,\n    className = props.className,\n    _props$color = props.color,\n    color = _props$color === void 0 ? 'default' : _props$color,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'button' : _props$component,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    _props$disableFocusRi = props.disableFocusRipple,\n    disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n    focusVisibleClassName = props.focusVisibleClassName,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'large' : _props$size,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'circular' : _props$variant,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var ownerState = _extends({}, props, {\n    color: color,\n    component: component,\n    disabled: disabled,\n    disableFocusRipple: disableFocusRipple,\n    size: size,\n    variant: variant\n  });\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FabRoot, _extends({\n    className: clsx(classes.root, className),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Fab.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'default'\r\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']), PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, the  keyboard focus ripple is disabled.\r\n   * @default false\r\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\r\n   * If `true`, the ripple effect is disabled.\r\n   */\n  disableRipple: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\r\n   * The URL to link to when the button is clicked.\r\n   * If defined, an `a` element will be used as the root node.\r\n   */\n  href: PropTypes.string,\n  /**\r\n   * The size of the component.\r\n   * `small` is equivalent to the dense button styling.\r\n   * @default 'large'\r\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n  /**\r\n   * The variant to use.\r\n   * @default 'circular'\r\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'extended']), PropTypes.string])\n} : void 0;\nexport default Fab;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}