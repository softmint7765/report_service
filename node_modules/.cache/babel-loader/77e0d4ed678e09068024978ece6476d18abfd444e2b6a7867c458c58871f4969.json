{"ast":null,"code":"\"use strict\";\n\nvar isValue = require(\"type/value/is\"),\n  isPlainFunction = require(\"type/plain-function/is\"),\n  assign = require(\"es5-ext/object/assign\"),\n  normalizeOpts = require(\"es5-ext/object/normalize-options\"),\n  contains = require(\"es5-ext/string/#/contains\");\nvar d = module.exports = function (dscr, value /*, options*/) {\n  var c, e, w, options, desc;\n  if (arguments.length < 2 || typeof dscr !== \"string\") {\n    options = value;\n    value = dscr;\n    dscr = null;\n  } else {\n    options = arguments[2];\n  }\n  if (isValue(dscr)) {\n    c = contains.call(dscr, \"c\");\n    e = contains.call(dscr, \"e\");\n    w = contains.call(dscr, \"w\");\n  } else {\n    c = w = true;\n    e = false;\n  }\n  desc = {\n    value: value,\n    configurable: c,\n    enumerable: e,\n    writable: w\n  };\n  return !options ? desc : assign(normalizeOpts(options), desc);\n};\nd.gs = function (dscr, get, set /*, options*/) {\n  var c, e, options, desc;\n  if (typeof dscr !== \"string\") {\n    options = set;\n    set = get;\n    get = dscr;\n    dscr = null;\n  } else {\n    options = arguments[3];\n  }\n  if (!isValue(get)) {\n    get = undefined;\n  } else if (!isPlainFunction(get)) {\n    options = get;\n    get = set = undefined;\n  } else if (!isValue(set)) {\n    set = undefined;\n  } else if (!isPlainFunction(set)) {\n    options = set;\n    set = undefined;\n  }\n  if (isValue(dscr)) {\n    c = contains.call(dscr, \"c\");\n    e = contains.call(dscr, \"e\");\n  } else {\n    c = true;\n    e = false;\n  }\n  desc = {\n    get: get,\n    set: set,\n    configurable: c,\n    enumerable: e\n  };\n  return !options ? desc : assign(normalizeOpts(options), desc);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}