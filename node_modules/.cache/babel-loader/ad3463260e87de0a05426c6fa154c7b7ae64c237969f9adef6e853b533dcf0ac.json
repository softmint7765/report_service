{"ast":null,"code":"import _defineProperty from \"C:/Users/91798/Documents/IPMsg/AutoSave/React admin/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"selected\", \"value\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@mui/material/Typography';\nimport { styled } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { getPickersToolbarTextUtilityClass, pickersToolbarTextClasses } from './pickersToolbarTextClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes,\n    selected = ownerState.selected;\n  var slots = {\n    root: ['root', selected && 'selected']\n  };\n  return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);\n};\nvar PickersToolbarTextRoot = styled(Typography, {\n  name: 'PrivatePickersToolbarText',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(_, styles) {\n    return [styles.root, _defineProperty({}, \"&.\".concat(pickersToolbarTextClasses.selected), styles.selected)];\n  }\n})(function (_ref2) {\n  var theme = _ref2.theme;\n  return _defineProperty({\n    transition: theme.transitions.create('color'),\n    color: theme.palette.text.secondary\n  }, \"&.\".concat(pickersToolbarTextClasses.selected), {\n    color: theme.palette.text.primary\n  });\n});\nexport var PickersToolbarText = /*#__PURE__*/React.forwardRef(function PickersToolbarText(props, ref) {\n  // TODO v6: add 'useThemeProps' once the component class names are aligned\n  var className = props.className,\n    value = props.value,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var classes = useUtilityClasses(props);\n  return /*#__PURE__*/_jsx(PickersToolbarTextRoot, _extends({\n    ref: ref,\n    className: clsx(className, classes.root),\n    component: \"span\"\n  }, other, {\n    children: value\n  }));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}