{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { onSpaceOrEnter } from '../utils/utils';\nimport { useLocaleText, useUtils } from '../hooks/useUtils';\nimport { getDisplayDate } from '../utils/text-field-helper';\n// TODO: why is this called \"Pure*\" when it's not memoized? Does \"Pure\" mean \"readonly\"?\nexport var PureDateInput = /*#__PURE__*/React.forwardRef(function PureDateInput(props, ref) {\n  var disabled = props.disabled,\n    getOpenDialogAriaTextProp = props.getOpenDialogAriaText,\n    inputFormat = props.inputFormat,\n    InputProps = props.InputProps,\n    inputRef = props.inputRef,\n    label = props.label,\n    onOpen = props.openPicker,\n    rawValue = props.rawValue,\n    renderInput = props.renderInput,\n    _props$TextFieldProps = props.TextFieldProps,\n    TextFieldProps = _props$TextFieldProps === void 0 ? {} : _props$TextFieldProps,\n    validationError = props.validationError,\n    className = props.className;\n  var localeText = useLocaleText(); // The prop can not be deprecated\n  // Default is \"Choose date, ...\", but time pickers override it with \"Choose time, ...\"\n\n  var getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;\n  var utils = useUtils();\n  var PureDateInputProps = React.useMemo(function () {\n    return _extends({}, InputProps, {\n      readOnly: true\n    });\n  }, [InputProps]);\n  var inputValue = getDisplayDate(utils, rawValue, inputFormat);\n  var handleOnClick = useEventCallback(function (event) {\n    event.stopPropagation();\n    onOpen();\n  });\n  return renderInput(_extends({\n    label: label,\n    disabled: disabled,\n    ref: ref,\n    inputRef: inputRef,\n    error: validationError,\n    InputProps: PureDateInputProps,\n    className: className\n  }, !props.readOnly && !props.disabled && {\n    onClick: handleOnClick\n  }, {\n    inputProps: _extends({\n      disabled: disabled,\n      readOnly: true,\n      'aria-readonly': true,\n      'aria-label': getOpenDialogAriaText(rawValue, utils),\n      value: inputValue\n    }, !props.readOnly && {\n      onClick: handleOnClick\n    }, {\n      onKeyDown: onSpaceOrEnter(onOpen)\n    })\n  }, TextFieldProps));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}