{"ast":null,"code":"'use strict';\n\nvar util = require('util');\nvar Undertaker = require('undertaker');\nvar vfs = require('vinyl-fs');\nvar watch = require('glob-watcher');\nfunction Gulp() {\n  Undertaker.call(this);\n\n  // Bind the functions for destructuring\n  this.watch = this.watch.bind(this);\n  this.task = this.task.bind(this);\n  this.series = this.series.bind(this);\n  this.parallel = this.parallel.bind(this);\n  this.registry = this.registry.bind(this);\n  this.tree = this.tree.bind(this);\n  this.lastRun = this.lastRun.bind(this);\n  this.src = this.src.bind(this);\n  this.dest = this.dest.bind(this);\n  this.symlink = this.symlink.bind(this);\n}\nutil.inherits(Gulp, Undertaker);\nGulp.prototype.src = vfs.src;\nGulp.prototype.dest = vfs.dest;\nGulp.prototype.symlink = vfs.symlink;\nGulp.prototype.watch = function (glob, opt, task) {\n  if (typeof opt === 'string' || typeof task === 'string' || Array.isArray(opt) || Array.isArray(task)) {\n    throw new Error('watching ' + glob + ': watch task has to be ' + 'a function (optionally generated by using gulp.parallel ' + 'or gulp.series)');\n  }\n  if (typeof opt === 'function') {\n    task = opt;\n    opt = {};\n  }\n  opt = opt || {};\n  var fn;\n  if (typeof task === 'function') {\n    fn = this.parallel(task);\n  }\n  return watch(glob, opt, fn);\n};\n\n// Let people use this class from our instance\nGulp.prototype.Gulp = Gulp;\nvar inst = new Gulp();\nmodule.exports = inst;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}