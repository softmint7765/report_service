{"ast":null,"code":"\"use strict\";\n\nvar iteratorSymbol = require(\"es6-symbol\").iterator,\n  isArguments = require(\"../../function/is-arguments\"),\n  isFunction = require(\"../../function/is-function\"),\n  toPosInt = require(\"../../number/to-pos-integer\"),\n  callable = require(\"../../object/valid-callable\"),\n  validValue = require(\"../../object/valid-value\"),\n  isValue = require(\"../../object/is-value\"),\n  isString = require(\"../../string/is-string\"),\n  isArray = Array.isArray,\n  call = Function.prototype.call,\n  desc = {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: null\n  },\n  defineProperty = Object.defineProperty;\n\n// eslint-disable-next-line complexity, max-lines-per-function\nmodule.exports = function (arrayLike /*, mapFn, thisArg*/) {\n  var mapFn = arguments[1],\n    thisArg = arguments[2],\n    Context,\n    i,\n    j,\n    arr,\n    length,\n    code,\n    iterator,\n    result,\n    getIterator,\n    value;\n  arrayLike = Object(validValue(arrayLike));\n  if (isValue(mapFn)) callable(mapFn);\n  if (!this || this === Array || !isFunction(this)) {\n    // Result: Plain array\n    if (!mapFn) {\n      if (isArguments(arrayLike)) {\n        // Source: Arguments\n        length = arrayLike.length;\n        if (length !== 1) return Array.apply(null, arrayLike);\n        arr = new Array(1);\n        arr[0] = arrayLike[0];\n        return arr;\n      }\n      if (isArray(arrayLike)) {\n        // Source: Array\n        arr = new Array(length = arrayLike.length);\n        for (i = 0; i < length; ++i) {\n          arr[i] = arrayLike[i];\n        }\n        return arr;\n      }\n    }\n    arr = [];\n  } else {\n    // Result: Non plain array\n    Context = this;\n  }\n  if (!isArray(arrayLike)) {\n    if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {\n      // Source: Iterator\n      iterator = callable(getIterator).call(arrayLike);\n      if (Context) arr = new Context();\n      result = iterator.next();\n      i = 0;\n      while (!result.done) {\n        value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;\n        if (Context) {\n          desc.value = value;\n          defineProperty(arr, i, desc);\n        } else {\n          arr[i] = value;\n        }\n        result = iterator.next();\n        ++i;\n      }\n      length = i;\n    } else if (isString(arrayLike)) {\n      // Source: String\n      length = arrayLike.length;\n      if (Context) arr = new Context();\n      for (i = 0, j = 0; i < length; ++i) {\n        value = arrayLike[i];\n        if (i + 1 < length) {\n          code = value.charCodeAt(0);\n          // eslint-disable-next-line max-depth\n          if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];\n        }\n        value = mapFn ? call.call(mapFn, thisArg, value, j) : value;\n        if (Context) {\n          desc.value = value;\n          defineProperty(arr, j, desc);\n        } else {\n          arr[j] = value;\n        }\n        ++j;\n      }\n      length = j;\n    }\n  }\n  if (length === undefined) {\n    // Source: array or array-like\n    length = toPosInt(arrayLike.length);\n    if (Context) arr = new Context(length);\n    for (i = 0; i < length; ++i) {\n      value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];\n      if (Context) {\n        desc.value = value;\n        defineProperty(arr, i, desc);\n      } else {\n        arr[i] = value;\n      }\n    }\n  }\n  if (Context) {\n    desc.value = null;\n    arr.length = length;\n  }\n  return arr;\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}