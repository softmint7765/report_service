{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\nvar map = require('arr-map');\nvar flatten = require('arr-flatten');\nvar levenshtein = require('fast-levenshtein');\nfunction normalizeArgs(registry, args) {\n  function getFunction(task) {\n    if (typeof task === 'function') {\n      return task;\n    }\n    var fn = registry.get(task);\n    if (!fn) {\n      var similar = similarTasks(registry, task);\n      if (similar.length > 0) {\n        assert(false, 'Task never defined: ' + task + ' - did you mean? ' + similar.join(', '));\n      } else {\n        assert(false, 'Task never defined: ' + task);\n      }\n    }\n    return fn;\n  }\n  var flattenArgs = flatten(args);\n  assert(flattenArgs.length, 'One or more tasks should be combined using series or parallel');\n  return map(flattenArgs, getFunction);\n}\nfunction similarTasks(registry, queryTask) {\n  if (typeof queryTask !== 'string') {\n    return [];\n  }\n  var tasks = registry.tasks();\n  var similarTasks = [];\n  for (var task in tasks) {\n    if (tasks.hasOwnProperty(task)) {\n      var distance = levenshtein.get(task, queryTask);\n      var allowedDistance = Math.floor(0.4 * task.length) + 1;\n      if (distance < allowedDistance) {\n        similarTasks.push(task);\n      }\n    }\n  }\n  return similarTasks;\n}\nmodule.exports = normalizeArgs;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}