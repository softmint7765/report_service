{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _warning = require('warning');\nvar _warning2 = _interopRequireDefault(_warning);\nvar _invariant = require('invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _LocationUtils = require('./LocationUtils');\nvar _PathUtils = require('./PathUtils');\nvar _createHistory = require('./createHistory');\nvar _createHistory2 = _interopRequireDefault(_createHistory);\nvar _Actions = require('./Actions');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar createStateStorage = function createStateStorage(entries) {\n  return entries.filter(function (entry) {\n    return entry.state;\n  }).reduce(function (memo, entry) {\n    memo[entry.key] = entry.state;\n    return memo;\n  }, {});\n};\nvar createMemoryHistory = function createMemoryHistory() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (Array.isArray(options)) {\n    options = {\n      entries: options\n    };\n  } else if (typeof options === 'string') {\n    options = {\n      entries: [options]\n    };\n  }\n  var getCurrentLocation = function getCurrentLocation() {\n    var entry = entries[current];\n    var path = (0, _PathUtils.createPath)(entry);\n    var key = void 0,\n      state = void 0;\n    if (entry.key) {\n      key = entry.key;\n      state = readState(key);\n    }\n    var init = (0, _PathUtils.parsePath)(path);\n    return (0, _LocationUtils.createLocation)(_extends({}, init, {\n      state: state\n    }), undefined, key);\n  };\n  var canGo = function canGo(n) {\n    var index = current + n;\n    return index >= 0 && index < entries.length;\n  };\n  var go = function go(n) {\n    if (!n) return;\n    if (!canGo(n)) {\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;\n      return;\n    }\n    current += n;\n    var currentLocation = getCurrentLocation();\n\n    // Change action to POP\n    history.transitionTo(_extends({}, currentLocation, {\n      action: _Actions.POP\n    }));\n  };\n  var pushLocation = function pushLocation(location) {\n    current += 1;\n    if (current < entries.length) entries.splice(current);\n    entries.push(location);\n    saveState(location.key, location.state);\n  };\n  var replaceLocation = function replaceLocation(location) {\n    entries[current] = location;\n    saveState(location.key, location.state);\n  };\n  var history = (0, _createHistory2.default)(_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    pushLocation: pushLocation,\n    replaceLocation: replaceLocation,\n    go: go\n  }));\n  var _options = options,\n    entries = _options.entries,\n    current = _options.current;\n  if (typeof entries === 'string') {\n    entries = [entries];\n  } else if (!Array.isArray(entries)) {\n    entries = ['/'];\n  }\n  entries = entries.map(function (entry) {\n    return (0, _LocationUtils.createLocation)(entry);\n  });\n  if (current == null) {\n    current = entries.length - 1;\n  } else {\n    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;\n  }\n  var storage = createStateStorage(entries);\n  var saveState = function saveState(key, state) {\n    return storage[key] = state;\n  };\n  var readState = function readState(key) {\n    return storage[key];\n  };\n  return _extends({}, history, {\n    canGo: canGo\n  });\n};\nexports.default = createMemoryHistory;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}