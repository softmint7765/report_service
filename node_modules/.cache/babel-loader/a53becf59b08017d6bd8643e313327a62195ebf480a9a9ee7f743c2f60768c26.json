{"ast":null,"code":"\"use strict\";\n\nvar isArguments = require(\"es5-ext/function/is-arguments\"),\n  callable = require(\"es5-ext/object/valid-callable\"),\n  isString = require(\"es5-ext/string/is-string\"),\n  get = require(\"./get\");\nvar isArray = Array.isArray,\n  call = Function.prototype.call,\n  some = Array.prototype.some;\nmodule.exports = function (iterable, cb /*, thisArg*/) {\n  var mode,\n    thisArg = arguments[2],\n    result,\n    doBreak,\n    broken,\n    i,\n    length,\n    char,\n    code;\n  if (isArray(iterable) || isArguments(iterable)) mode = \"array\";else if (isString(iterable)) mode = \"string\";else iterable = get(iterable);\n  callable(cb);\n  doBreak = function doBreak() {\n    broken = true;\n  };\n  if (mode === \"array\") {\n    some.call(iterable, function (value) {\n      call.call(cb, thisArg, value, doBreak);\n      return broken;\n    });\n    return;\n  }\n  if (mode === \"string\") {\n    length = iterable.length;\n    for (i = 0; i < length; ++i) {\n      char = iterable[i];\n      if (i + 1 < length) {\n        code = char.charCodeAt(0);\n        if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];\n      }\n      call.call(cb, thisArg, char, doBreak);\n      if (broken) break;\n    }\n    return;\n  }\n  result = iterable.next();\n  while (!result.done) {\n    call.call(cb, thisArg, result.value, doBreak);\n    if (broken) return;\n    result = iterable.next();\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}