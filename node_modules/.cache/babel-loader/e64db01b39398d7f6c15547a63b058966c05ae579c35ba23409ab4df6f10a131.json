{"ast":null,"code":"(function () {\n  'use strict';\n\n  /**\n   * Extend an Object with another Object's properties.\n   *\n   * The source objects are specified as additional arguments.\n   *\n   * @param dst Object the object to extend.\n   *\n   * @return Object the final object.\n   */\n  var _extend = function _extend(dst) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    for (var i = 0; i < sources.length; ++i) {\n      var src = sources[i];\n      for (var p in src) {\n        if (src.hasOwnProperty(p)) dst[p] = src[p];\n      }\n    }\n    return dst;\n  };\n\n  /**\n   * Defer execution of given function.\n   * @param  {Function} func\n   */\n  var _defer = function _defer(func) {\n    if (typeof setImmediate === 'function') {\n      return setImmediate(func);\n    } else {\n      return setTimeout(func, 0);\n    }\n  };\n\n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function get(str1, str2) {\n      // base cases\n      if (str1 === str2) return 0;\n      if (str1.length === 0) return str2.length;\n      if (str2.length === 0) return str1.length;\n\n      // two rows\n      var prevRow = new Array(str2.length + 1),\n        curCol,\n        nextCol,\n        i,\n        j,\n        tmp;\n\n      // initialise previous row\n      for (i = 0; i < prevRow.length; ++i) {\n        prevRow[i] = i;\n      }\n\n      // calculate current row distance from previous row\n      for (i = 0; i < str1.length; ++i) {\n        nextCol = i + 1;\n        for (j = 0; j < str2.length; ++j) {\n          curCol = nextCol;\n\n          // substution\n          nextCol = prevRow[j] + (str1.charAt(i) === str2.charAt(j) ? 0 : 1);\n          // insertion\n          tmp = curCol + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n          // deletion\n          tmp = prevRow[j + 1] + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n\n          // copy current col value into previous (in preparation for next iteration)\n          prevRow[j] = curCol;\n        }\n\n        // copy last col value into previous (in preparation for next iteration)\n        prevRow[j] = nextCol;\n      }\n      return nextCol;\n    },\n    /**\n     * Asynchronously calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param cb Function callback function with signature: function(Error err, int distance)\n     * @param [options] Object additional options.\n     * @param [options.progress] Function progress callback with signature: function(percentComplete)\n     */\n    getAsync: function getAsync(str1, str2, cb, options) {\n      options = _extend({}, {\n        progress: null\n      }, options);\n\n      // base cases\n      if (str1 === str2) return cb(null, 0);\n      if (str1.length === 0) return cb(null, str2.length);\n      if (str2.length === 0) return cb(null, str1.length);\n\n      // two rows\n      var prevRow = new Array(str2.length + 1),\n        curCol,\n        nextCol,\n        i,\n        j,\n        tmp,\n        startTime,\n        currentTime;\n\n      // initialise previous row\n      for (i = 0; i < prevRow.length; ++i) {\n        prevRow[i] = i;\n      }\n      nextCol = 1;\n      i = 0;\n      j = -1;\n      var __calculate = function __calculate() {\n        // reset timer\n        startTime = new Date().valueOf();\n        currentTime = startTime;\n\n        // keep going until one second has elapsed\n        while (currentTime - startTime < 1000) {\n          // reached end of current row?\n          if (str2.length <= ++j) {\n            // copy current into previous (in preparation for next iteration)\n            prevRow[j] = nextCol;\n\n            // if already done all chars\n            if (str1.length <= ++i) {\n              return cb(null, nextCol);\n            }\n            // else if we have more left to do\n            else {\n              nextCol = i + 1;\n              j = 0;\n            }\n          }\n\n          // calculation\n          curCol = nextCol;\n\n          // substution\n          nextCol = prevRow[j] + (str1.charAt(i) === str2.charAt(j) ? 0 : 1);\n          // insertion\n          tmp = curCol + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n          // deletion\n          tmp = prevRow[j + 1] + 1;\n          if (nextCol > tmp) {\n            nextCol = tmp;\n          }\n\n          // copy current into previous (in preparation for next iteration)\n          prevRow[j] = curCol;\n\n          // get current time\n          currentTime = new Date().valueOf();\n        }\n\n        // send a progress update?\n        if (null !== options.progress) {\n          try {\n            options.progress.call(null, i * 100.0 / str1.length);\n          } catch (err) {\n            return cb('Progress callback: ' + err.toString());\n          }\n        }\n\n        // next iteration\n        _defer(__calculate);\n      };\n      __calculate();\n    }\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function () {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n})();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}