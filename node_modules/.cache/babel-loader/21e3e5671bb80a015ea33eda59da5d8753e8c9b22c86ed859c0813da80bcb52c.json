{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\nvar WM = require('es6-weak-map');\nvar hasNativeWeakMap = require('es6-weak-map/is-native-implemented');\nvar defaultResolution = require('default-resolution');\nvar runtimes = new WM();\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\nfunction isExtensible(fn) {\n  if (hasNativeWeakMap) {\n    // Native weakmap doesn't care about extensible\n    return true;\n  }\n  return Object.isExtensible(fn);\n}\nfunction lastRun(fn, timeResolution) {\n  assert(isFunction(fn), 'Only functions can check lastRun');\n  assert(isExtensible(fn), 'Only extensible functions can check lastRun');\n  var time = runtimes.get(fn);\n  if (time == null) {\n    return;\n  }\n  var resolution = defaultResolution(timeResolution);\n  return time - time % resolution;\n}\nfunction capture(fn, timestamp) {\n  assert(isFunction(fn), 'Only functions can be captured');\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\n  timestamp = timestamp || Date.now();\n  runtimes.set(fn, timestamp);\n}\nfunction release(fn) {\n  assert(isFunction(fn), 'Only functions can be captured');\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\n  runtimes.delete(fn);\n}\nlastRun.capture = capture;\nlastRun.release = release;\nmodule.exports = lastRun;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}