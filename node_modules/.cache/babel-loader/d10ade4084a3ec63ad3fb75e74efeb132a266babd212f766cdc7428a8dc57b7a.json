{"ast":null,"code":"/**\r\n * @param {number}\r\n * @return {number}\r\n */\nexport var abs = Math.abs;\n\n/**\r\n * @param {number}\r\n * @return {string}\r\n */\nexport var from = String.fromCharCode;\n\n/**\r\n * @param {object}\r\n * @return {object}\r\n */\nexport var assign = Object.assign;\n\n/**\r\n * @param {string} value\r\n * @param {number} length\r\n * @return {number}\r\n */\nexport function hash(value, length) {\n  return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;\n}\n\n/**\r\n * @param {string} value\r\n * @return {string}\r\n */\nexport function trim(value) {\n  return value.trim();\n}\n\n/**\r\n * @param {string} value\r\n * @param {RegExp} pattern\r\n * @return {string?}\r\n */\nexport function match(value, pattern) {\n  return (value = pattern.exec(value)) ? value[0] : value;\n}\n\n/**\r\n * @param {string} value\r\n * @param {(string|RegExp)} pattern\r\n * @param {string} replacement\r\n * @return {string}\r\n */\nexport function replace(value, pattern, replacement) {\n  return value.replace(pattern, replacement);\n}\n\n/**\r\n * @param {string} value\r\n * @param {string} search\r\n * @return {number}\r\n */\nexport function indexof(value, search) {\n  return value.indexOf(search);\n}\n\n/**\r\n * @param {string} value\r\n * @param {number} index\r\n * @return {number}\r\n */\nexport function charat(value, index) {\n  return value.charCodeAt(index) | 0;\n}\n\n/**\r\n * @param {string} value\r\n * @param {number} begin\r\n * @param {number} end\r\n * @return {string}\r\n */\nexport function substr(value, begin, end) {\n  return value.slice(begin, end);\n}\n\n/**\r\n * @param {string} value\r\n * @return {number}\r\n */\nexport function strlen(value) {\n  return value.length;\n}\n\n/**\r\n * @param {any[]} value\r\n * @return {number}\r\n */\nexport function sizeof(value) {\n  return value.length;\n}\n\n/**\r\n * @param {any} value\r\n * @param {any[]} array\r\n * @return {any}\r\n */\nexport function append(value, array) {\n  return array.push(value), value;\n}\n\n/**\r\n * @param {string[]} array\r\n * @param {function} callback\r\n * @return {string}\r\n */\nexport function combine(array, callback) {\n  return array.map(callback).join('');\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}