{"ast":null,"code":"var toString = Object.prototype.toString;\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n  switch (ctorName(val)) {\n    case 'Symbol':\n      return 'symbol';\n    case 'Promise':\n      return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap':\n      return 'weakmap';\n    case 'WeakSet':\n      return 'weakset';\n    case 'Map':\n      return 'map';\n    case 'Set':\n      return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array':\n      return 'int8array';\n    case 'Uint8Array':\n      return 'uint8array';\n    case 'Uint8ClampedArray':\n      return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array':\n      return 'int16array';\n    case 'Uint16Array':\n      return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array':\n      return 'int32array';\n    case 'Uint32Array':\n      return 'uint32array';\n    case 'Float32Array':\n      return 'float32array';\n    case 'Float64Array':\n      return 'float64array';\n  }\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]':\n      return 'object';\n    // iterators\n    case '[object Map Iterator]':\n      return 'mapiterator';\n    case '[object Set Iterator]':\n      return 'setiterator';\n    case '[object String Iterator]':\n      return 'stringiterator';\n    case '[object Array Iterator]':\n      return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string' && typeof val.ignoreCase === 'boolean' && typeof val.multiline === 'boolean' && typeof val.global === 'boolean';\n}\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function' && typeof val.return === 'function' && typeof val.next === 'function';\n}\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}