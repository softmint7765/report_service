{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from '../../utils/time-utils';\nimport { useValidation } from './useValidation';\nexport var validateTime = function validateTime(_ref) {\n  var adapter = _ref.adapter,\n    value = _ref.value,\n    props = _ref.props;\n  var minTime = props.minTime,\n    maxTime = props.maxTime,\n    minutesStep = props.minutesStep,\n    shouldDisableTime = props.shouldDisableTime,\n    disableIgnoringDatePartForTimeValidation = props.disableIgnoringDatePartForTimeValidation;\n  var date = adapter.utils.date(value);\n  var isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);\n  if (value === null) {\n    return null;\n  }\n  switch (true) {\n    case !adapter.utils.isValid(value):\n      return 'invalidDate';\n    case Boolean(minTime && isAfter(minTime, date)):\n      return 'minTime';\n    case Boolean(maxTime && isAfter(date, maxTime)):\n      return 'maxTime';\n    case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n    case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n    case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n    case Boolean(minutesStep && adapter.utils.getMinutes(date) % minutesStep !== 0):\n      return 'minutesStep';\n    default:\n      return null;\n  }\n};\nvar isSameTimeError = function isSameTimeError(a, b) {\n  return a === b;\n};\nexport var useTimeValidation = function useTimeValidation(props) {\n  return useValidation(props, validateTime, isSameTimeError);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}