{"ast":null,"code":"'use strict';\n\nvar captureLastRun = require('last-run').capture;\nvar releaseLastRun = require('last-run').release;\nvar metadata = require('./metadata');\nvar uid = 0;\nfunction Storage(fn) {\n  var meta = metadata.get(fn);\n  this.fn = meta.orig || fn;\n  this.uid = uid++;\n  this.name = meta.name;\n  this.branch = meta.branch || false;\n  this.captureTime = Date.now();\n  this.startHr = [];\n}\nStorage.prototype.capture = function () {\n  captureLastRun(this.fn, this.captureTime);\n};\nStorage.prototype.release = function () {\n  releaseLastRun(this.fn);\n};\nfunction createExtensions(ee) {\n  return {\n    create: function create(fn) {\n      return new Storage(fn);\n    },\n    before: function before(storage) {\n      storage.startHr = process.hrtime();\n      ee.emit('start', {\n        uid: storage.uid,\n        name: storage.name,\n        branch: storage.branch,\n        time: Date.now()\n      });\n    },\n    after: function after(result, storage) {\n      if (result && result.state === 'error') {\n        return this.error(result.value, storage);\n      }\n      storage.capture();\n      ee.emit('stop', {\n        uid: storage.uid,\n        name: storage.name,\n        branch: storage.branch,\n        duration: process.hrtime(storage.startHr),\n        time: Date.now()\n      });\n    },\n    error: function error(_error, storage) {\n      if (Array.isArray(_error)) {\n        _error = _error[0];\n      }\n      storage.release();\n      ee.emit('error', {\n        uid: storage.uid,\n        name: storage.name,\n        branch: storage.branch,\n        error: _error,\n        duration: process.hrtime(storage.startHr),\n        time: Date.now()\n      });\n    }\n  };\n}\nmodule.exports = createExtensions;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}