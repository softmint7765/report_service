{"ast":null,"code":"/*!\n * set-value <https://github.com/jonschlinkert/set-value>\n *\n * Copyright (c) 2014-2015, 2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar split = require('split-string');\nvar extend = require('extend-shallow');\nvar isPlainObject = require('is-plain-object');\nvar isObject = require('is-extendable');\nmodule.exports = function (obj, prop, val) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n  if (Array.isArray(prop)) {\n    prop = [].concat.apply([], prop).join('.');\n  }\n  if (typeof prop !== 'string') {\n    return obj;\n  }\n  var keys = split(prop, {\n    sep: '.',\n    brackets: true\n  }).filter(isValidKey);\n  var len = keys.length;\n  var idx = -1;\n  var current = obj;\n  while (++idx < len) {\n    var key = keys[idx];\n    if (idx !== len - 1) {\n      if (!isObject(current[key])) {\n        current[key] = {};\n      }\n      current = current[key];\n      continue;\n    }\n    if (isPlainObject(current[key]) && isPlainObject(val)) {\n      current[key] = extend({}, current[key], val);\n    } else {\n      current[key] = val;\n    }\n  }\n  return obj;\n};\nfunction isValidKey(key) {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}