{"ast":null,"code":"import { mapAsync } from './AsyncUtils';\nimport { isPromise } from './PromiseUtils';\nfunction getComponentsForRoute(nextState, route, callback) {\n  if (route.component || route.components) {\n    callback(null, route.component || route.components);\n    return;\n  }\n  var getComponent = route.getComponent || route.getComponents;\n  if (getComponent) {\n    var componentReturn = getComponent.call(route, nextState, callback);\n    if (isPromise(componentReturn)) componentReturn.then(function (component) {\n      return callback(null, component);\n    }, callback);\n  } else {\n    callback();\n  }\n}\n\n/**\r\n * Asynchronously fetches all components needed for the given router\r\n * state and calls callback(error, components) when finished.\r\n *\r\n * Note: This operation may finish synchronously if no routes have an\r\n * asynchronous getComponents method.\r\n */\nfunction getComponents(nextState, callback) {\n  mapAsync(nextState.routes, function (route, index, callback) {\n    getComponentsForRoute(nextState, route, callback);\n  }, callback);\n}\nexport default getComponents;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}