{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _invariant = require('invariant');\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\nvar _BrowserProtocol = require('./BrowserProtocol');\nvar BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);\nvar _RefreshProtocol = require('./RefreshProtocol');\nvar RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);\nvar _DOMUtils = require('./DOMUtils');\nvar _createHistory = require('./createHistory');\nvar _createHistory2 = _interopRequireDefault(_createHistory);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\r\n * Creates and returns a history object that uses HTML5's history API\r\n * (pushState, replaceState, and the popstate event) to manage history.\r\n * This is the recommended method of managing history in browsers because\r\n * it provides the cleanest URLs.\r\n *\r\n * Note: In browsers that do not support the HTML5 history API full\r\n * page reloads will be used to preserve clean URLs. You can force this\r\n * behavior using { forceRefresh: true } in options.\r\n */\nvar createBrowserHistory = function createBrowserHistory() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;\n  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();\n  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;\n  var getUserConfirmation = Protocol.getUserConfirmation,\n    getCurrentLocation = Protocol.getCurrentLocation,\n    pushLocation = Protocol.pushLocation,\n    replaceLocation = Protocol.replaceLocation,\n    go = Protocol.go;\n  var history = (0, _createHistory2.default)(_extends({\n    getUserConfirmation: getUserConfirmation\n  }, options, {\n    getCurrentLocation: getCurrentLocation,\n    pushLocation: pushLocation,\n    replaceLocation: replaceLocation,\n    go: go\n  }));\n  var listenerCount = 0,\n    stopListener = void 0;\n  var startListener = function startListener(listener, before) {\n    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);\n    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);\n    return function () {\n      unlisten();\n      if (--listenerCount === 0) stopListener();\n    };\n  };\n  var listenBefore = function listenBefore(listener) {\n    return startListener(listener, true);\n  };\n  var listen = function listen(listener) {\n    return startListener(listener, false);\n  };\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen\n  });\n};\nexports.default = createBrowserHistory;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}