{"ast":null,"code":"import { from, trim, charat, strlen, substr, append, assign } from './Utility.js';\nexport var line = 1;\nexport var column = 1;\nexport var length = 0;\nexport var position = 0;\nexport var character = 0;\nexport var characters = '';\n\n/**\r\n * @param {string} value\r\n * @param {object | null} root\r\n * @param {object | null} parent\r\n * @param {string} type\r\n * @param {string[] | string} props\r\n * @param {object[] | string} children\r\n * @param {number} length\r\n */\nexport function node(value, root, parent, type, props, children, length) {\n  return {\n    value: value,\n    root: root,\n    parent: parent,\n    type: type,\n    props: props,\n    children: children,\n    line: line,\n    column: column,\n    length: length,\n    return: ''\n  };\n}\n\n/**\r\n * @param {object} root\r\n * @param {object} props\r\n * @return {object}\r\n */\nexport function copy(root, props) {\n  return assign(node('', null, null, '', null, null, 0), root, {\n    length: -root.length\n  }, props);\n}\n\n/**\r\n * @return {number}\r\n */\nexport function char() {\n  return character;\n}\n\n/**\r\n * @return {number}\r\n */\nexport function prev() {\n  character = position > 0 ? charat(characters, --position) : 0;\n  if (column--, character === 10) column = 1, line--;\n  return character;\n}\n\n/**\r\n * @return {number}\r\n */\nexport function next() {\n  character = position < length ? charat(characters, position++) : 0;\n  if (column++, character === 10) column = 1, line++;\n  return character;\n}\n\n/**\r\n * @return {number}\r\n */\nexport function peek() {\n  return charat(characters, position);\n}\n\n/**\r\n * @return {number}\r\n */\nexport function caret() {\n  return position;\n}\n\n/**\r\n * @param {number} begin\r\n * @param {number} end\r\n * @return {string}\r\n */\nexport function slice(begin, end) {\n  return substr(characters, begin, end);\n}\n\n/**\r\n * @param {number} type\r\n * @return {number}\r\n */\nexport function token(type) {\n  switch (type) {\n    // \\0 \\t \\n \\r \\s whitespace token\n    case 0:\n    case 9:\n    case 10:\n    case 13:\n    case 32:\n      return 5;\n    // ! + , / > @ ~ isolate token\n    case 33:\n    case 43:\n    case 44:\n    case 47:\n    case 62:\n    case 64:\n    case 126:\n    // ; { } breakpoint token\n    case 59:\n    case 123:\n    case 125:\n      return 4;\n    // : accompanied token\n    case 58:\n      return 3;\n    // \" ' ( [ opening delimit token\n    case 34:\n    case 39:\n    case 40:\n    case 91:\n      return 2;\n    // ) ] closing delimit token\n    case 41:\n    case 93:\n      return 1;\n  }\n  return 0;\n}\n\n/**\r\n * @param {string} value\r\n * @return {any[]}\r\n */\nexport function alloc(value) {\n  return line = column = 1, length = strlen(characters = value), position = 0, [];\n}\n\n/**\r\n * @param {any} value\r\n * @return {any}\r\n */\nexport function dealloc(value) {\n  return characters = '', value;\n}\n\n/**\r\n * @param {number} type\r\n * @return {string}\r\n */\nexport function delimit(type) {\n  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));\n}\n\n/**\r\n * @param {string} value\r\n * @return {string[]}\r\n */\nexport function tokenize(value) {\n  return dealloc(tokenizer(alloc(value)));\n}\n\n/**\r\n * @param {number} type\r\n * @return {string}\r\n */\nexport function whitespace(type) {\n  while (character = peek()) {\n    if (character < 33) next();else break;\n  }\n  return token(type) > 2 || token(character) > 3 ? '' : ' ';\n}\n\n/**\r\n * @param {string[]} children\r\n * @return {string[]}\r\n */\nexport function tokenizer(children) {\n  while (next()) {\n    switch (token(character)) {\n      case 0:\n        append(identifier(position - 1), children);\n        break;\n      case 2:\n        append(delimit(character), children);\n        break;\n      default:\n        append(from(character), children);\n    }\n  }\n  return children;\n}\n\n/**\r\n * @param {number} index\r\n * @param {number} count\r\n * @return {string}\r\n */\nexport function escaping(index, count) {\n  while (--count && next()) {\n    // not 0-9 A-F a-f\n    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;\n  }\n  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));\n}\n\n/**\r\n * @param {number} type\r\n * @return {number}\r\n */\nexport function delimiter(type) {\n  while (next()) {\n    switch (character) {\n      // ] ) \" '\n      case type:\n        return position;\n      // \" '\n      case 34:\n      case 39:\n        if (type !== 34 && type !== 39) delimiter(character);\n        break;\n      // (\n      case 40:\n        if (type === 41) delimiter(type);\n        break;\n      // \\\n      case 92:\n        next();\n        break;\n    }\n  }\n  return position;\n}\n\n/**\r\n * @param {number} type\r\n * @param {number} index\r\n * @return {number}\r\n */\nexport function commenter(type, index) {\n  while (next()) {\n    // //\n    if (type + character === 47 + 10) break;\n    // /*\n    else if (type + character === 42 + 42 && peek() === 47) break;\n  }\n  return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next());\n}\n\n/**\r\n * @param {number} index\r\n * @return {string}\r\n */\nexport function identifier(index) {\n  while (!token(peek())) {\n    next();\n  }\n  return slice(index, position);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}