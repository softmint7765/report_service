{"ast":null,"code":"'use strict';\n\nvar use = require('use');\nvar util = require('util');\nvar Cache = require('map-cache');\nvar _define = require('define-property');\nvar debug = require('debug')('snapdragon:parser');\nvar Position = require('./position');\nvar utils = require('./utils');\n\n/**\n * Create a new `Parser` with the given `input` and `options`.\n * @param {String} `input`\n * @param {Object} `options`\n * @api public\n */\n\nfunction Parser(options) {\n  debug('initializing', __filename);\n  this.options = utils.extend({\n    source: 'string'\n  }, options);\n  this.init(this.options);\n  use(this);\n}\n\n/**\n * Prototype methods\n */\n\nParser.prototype = {\n  constructor: Parser,\n  init: function init(options) {\n    this.orig = '';\n    this.input = '';\n    this.parsed = '';\n    this.column = 1;\n    this.line = 1;\n    this.regex = new Cache();\n    this.errors = this.errors || [];\n    this.parsers = this.parsers || {};\n    this.types = this.types || [];\n    this.sets = this.sets || {};\n    this.fns = this.fns || [];\n    this.currentType = 'root';\n    var pos = this.position();\n    this.bos = pos({\n      type: 'bos',\n      val: ''\n    });\n    this.ast = {\n      type: 'root',\n      errors: this.errors,\n      nodes: [this.bos]\n    };\n    _define(this.bos, 'parent', this.ast);\n    this.nodes = [this.ast];\n    this.count = 0;\n    this.setCount = 0;\n    this.stack = [];\n  },\n  /**\n   * Throw a formatted error with the cursor column and `msg`.\n   * @param {String} `msg` Message to use in the Error.\n   */\n\n  error: function error(msg, node) {\n    var pos = node.position || {\n      start: {\n        column: 0,\n        line: 0\n      }\n    };\n    var line = pos.start.line;\n    var column = pos.start.column;\n    var source = this.options.source;\n    var message = source + ' <line:' + line + ' column:' + column + '>: ' + msg;\n    var err = new Error(message);\n    err.source = source;\n    err.reason = msg;\n    err.pos = pos;\n    if (this.options.silent) {\n      this.errors.push(err);\n    } else {\n      throw err;\n    }\n  },\n  /**\n   * Define a non-enumberable property on the `Parser` instance.\n   *\n   * ```js\n   * parser.define('foo', 'bar');\n   * ```\n   * @name .define\n   * @param {String} `key` propery name\n   * @param {any} `val` property value\n   * @return {Object} Returns the Parser instance for chaining.\n   * @api public\n   */\n\n  define: function define(key, val) {\n    _define(this, key, val);\n    return this;\n  },\n  /**\n   * Mark position and patch `node.position`.\n   */\n\n  position: function position() {\n    var start = {\n      line: this.line,\n      column: this.column\n    };\n    var self = this;\n    return function (node) {\n      _define(node, 'position', new Position(start, self));\n      return node;\n    };\n  },\n  /**\n   * Set parser `name` with the given `fn`\n   * @param {String} `name`\n   * @param {Function} `fn`\n   * @api public\n   */\n\n  set: function set(type, fn) {\n    if (this.types.indexOf(type) === -1) {\n      this.types.push(type);\n    }\n    this.parsers[type] = fn.bind(this);\n    return this;\n  },\n  /**\n   * Get parser `name`\n   * @param {String} `name`\n   * @api public\n   */\n\n  get: function get(name) {\n    return this.parsers[name];\n  },\n  /**\n   * Push a `token` onto the `type` stack.\n   *\n   * @param {String} `type`\n   * @return {Object} `token`\n   * @api public\n   */\n\n  push: function push(type, token) {\n    this.sets[type] = this.sets[type] || [];\n    this.count++;\n    this.stack.push(token);\n    return this.sets[type].push(token);\n  },\n  /**\n   * Pop a token off of the `type` stack\n   * @param {String} `type`\n   * @returns {Object} Returns a token\n   * @api public\n   */\n\n  pop: function pop(type) {\n    this.sets[type] = this.sets[type] || [];\n    this.count--;\n    this.stack.pop();\n    return this.sets[type].pop();\n  },\n  /**\n   * Return true if inside a `stack` node. Types are `braces`, `parens` or `brackets`.\n   *\n   * @param {String} `type`\n   * @return {Boolean}\n   * @api public\n   */\n\n  isInside: function isInside(type) {\n    this.sets[type] = this.sets[type] || [];\n    return this.sets[type].length > 0;\n  },\n  /**\n   * Return true if `node` is the given `type`.\n   *\n   * ```js\n   * parser.isType(node, 'brace');\n   * ```\n   * @param {Object} `node`\n   * @param {String} `type`\n   * @return {Boolean}\n   * @api public\n   */\n\n  isType: function isType(node, type) {\n    return node && node.type === type;\n  },\n  /**\n   * Get the previous AST node\n   * @return {Object}\n   */\n\n  prev: function prev(n) {\n    return this.stack.length > 0 ? utils.last(this.stack, n) : utils.last(this.nodes, n);\n  },\n  /**\n   * Update line and column based on `str`.\n   */\n\n  consume: function consume(len) {\n    this.input = this.input.substr(len);\n  },\n  /**\n   * Update column based on `str`.\n   */\n\n  updatePosition: function updatePosition(str, len) {\n    var lines = str.match(/\\n/g);\n    if (lines) this.line += lines.length;\n    var i = str.lastIndexOf('\\n');\n    this.column = ~i ? len - i : this.column + len;\n    this.parsed += str;\n    this.consume(len);\n  },\n  /**\n   * Match `regex`, return captures, and update the cursor position by `match[0]` length.\n   * @param {RegExp} `regex`\n   * @return {Object}\n   */\n\n  match: function match(regex) {\n    var m = regex.exec(this.input);\n    if (m) {\n      this.updatePosition(m[0], m[0].length);\n      return m;\n    }\n  },\n  /**\n   * Capture `type` with the given regex.\n   * @param {String} `type`\n   * @param {RegExp} `regex`\n   * @return {Function}\n   */\n\n  capture: function capture(type, regex) {\n    if (typeof regex === 'function') {\n      return this.set.apply(this, arguments);\n    }\n    this.regex.set(type, regex);\n    this.set(type, function () {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(regex);\n      if (!m || !m[0]) return;\n      var prev = this.prev();\n      var node = pos({\n        type: type,\n        val: m[0],\n        parsed: parsed,\n        rest: this.input\n      });\n      if (m[1]) {\n        node.inner = m[1];\n      }\n      _define(node, 'inside', this.stack.length > 0);\n      _define(node, 'parent', prev);\n      prev.nodes.push(node);\n    }.bind(this));\n    return this;\n  },\n  /**\n   * Create a parser with open and close for parens,\n   * brackets or braces\n   */\n\n  capturePair: function capturePair(type, openRegex, closeRegex, fn) {\n    this.sets[type] = this.sets[type] || [];\n\n    /**\n     * Open\n     */\n\n    this.set(type + '.open', function () {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(openRegex);\n      if (!m || !m[0]) return;\n      var val = m[0];\n      this.setCount++;\n      this.specialChars = true;\n      var open = pos({\n        type: type + '.open',\n        val: val,\n        rest: this.input\n      });\n      if (typeof m[1] !== 'undefined') {\n        open.inner = m[1];\n      }\n      var prev = this.prev();\n      var node = pos({\n        type: type,\n        nodes: [open]\n      });\n      _define(node, 'rest', this.input);\n      _define(node, 'parsed', parsed);\n      _define(node, 'prefix', m[1]);\n      _define(node, 'parent', prev);\n      _define(open, 'parent', node);\n      if (typeof fn === 'function') {\n        fn.call(this, open, node);\n      }\n      this.push(type, node);\n      prev.nodes.push(node);\n    });\n\n    /**\n     * Close\n     */\n\n    this.set(type + '.close', function () {\n      var pos = this.position();\n      var m = this.match(closeRegex);\n      if (!m || !m[0]) return;\n      var parent = this.pop(type);\n      var node = pos({\n        type: type + '.close',\n        rest: this.input,\n        suffix: m[1],\n        val: m[0]\n      });\n      if (!this.isType(parent, type)) {\n        if (this.options.strict) {\n          throw new Error('missing opening \"' + type + '\"');\n        }\n        this.setCount--;\n        node.escaped = true;\n        return node;\n      }\n      if (node.suffix === '\\\\') {\n        parent.escaped = true;\n        node.escaped = true;\n      }\n      parent.nodes.push(node);\n      _define(node, 'parent', parent);\n    });\n    return this;\n  },\n  /**\n   * Capture end-of-string\n   */\n\n  eos: function eos() {\n    var pos = this.position();\n    if (this.input) return;\n    var prev = this.prev();\n    while (prev.type !== 'root' && !prev.visited) {\n      if (this.options.strict === true) {\n        throw new SyntaxError('invalid syntax:' + util.inspect(prev, null, 2));\n      }\n      if (!hasDelims(prev)) {\n        prev.parent.escaped = true;\n        prev.escaped = true;\n      }\n      visit(prev, function (node) {\n        if (!hasDelims(node.parent)) {\n          node.parent.escaped = true;\n          node.escaped = true;\n        }\n      });\n      prev = prev.parent;\n    }\n    var tok = pos({\n      type: 'eos',\n      val: this.append || ''\n    });\n    _define(tok, 'parent', this.ast);\n    return tok;\n  },\n  /**\n   * Run parsers to advance the cursor position\n   */\n\n  next: function next() {\n    var parsed = this.parsed;\n    var len = this.types.length;\n    var idx = -1;\n    var tok;\n    while (++idx < len) {\n      if (tok = this.parsers[this.types[idx]].call(this)) {\n        _define(tok, 'rest', this.input);\n        _define(tok, 'parsed', parsed);\n        this.last = tok;\n        return tok;\n      }\n    }\n  },\n  /**\n   * Parse the given string.\n   * @return {Array}\n   */\n\n  parse: function parse(input) {\n    if (typeof input !== 'string') {\n      throw new TypeError('expected a string');\n    }\n    this.init(this.options);\n    this.orig = input;\n    this.input = input;\n    var self = this;\n    function parse() {\n      // check input before calling `.next()`\n      input = self.input;\n\n      // get the next AST ndoe\n      var node = self.next();\n      if (node) {\n        var prev = self.prev();\n        if (prev) {\n          _define(node, 'parent', prev);\n          if (prev.nodes) {\n            prev.nodes.push(node);\n          }\n        }\n        if (self.sets.hasOwnProperty(prev.type)) {\n          self.currentType = prev.type;\n        }\n      }\n\n      // if we got here but input is not changed, throw an error\n      if (self.input && input === self.input) {\n        throw new Error('no parsers registered for: \"' + self.input.slice(0, 5) + '\"');\n      }\n    }\n    while (this.input) {\n      parse();\n    }\n    if (this.stack.length && this.options.strict) {\n      var node = this.stack.pop();\n      throw this.error('missing opening ' + node.type + ': \"' + this.orig + '\"');\n    }\n    var eos = this.eos();\n    var tok = this.prev();\n    if (tok.type !== 'eos') {\n      this.ast.nodes.push(eos);\n    }\n    return this.ast;\n  }\n};\n\n/**\n * Visit `node` with the given `fn`\n */\n\nfunction visit(node, fn) {\n  if (!node.visited) {\n    _define(node, 'visited', true);\n    return node.nodes ? mapVisit(node.nodes, fn) : fn(node);\n  }\n  return node;\n}\n\n/**\n * Map visit over array of `nodes`.\n */\n\nfunction mapVisit(nodes, fn) {\n  var len = nodes.length;\n  var idx = -1;\n  while (++idx < len) {\n    visit(nodes[idx], fn);\n  }\n}\nfunction hasOpen(node) {\n  return node.nodes && node.nodes[0].type === node.type + '.open';\n}\nfunction hasClose(node) {\n  return node.nodes && utils.last(node.nodes).type === node.type + '.close';\n}\nfunction hasDelims(node) {\n  return hasOpen(node) && hasClose(node);\n}\n\n/**\n * Expose `Parser`\n */\n\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}