{"ast":null,"code":"/*!\n * make-iterator <https://github.com/jonschlinkert/make-iterator>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar typeOf = require('kind-of');\nmodule.exports = function makeIterator(target, thisArg) {\n  switch (typeOf(target)) {\n    case 'undefined':\n    case 'null':\n      return noop;\n    case 'function':\n      // function is the first to improve perf (most common case)\n      // also avoid using `Function#call` if not needed, which boosts\n      // perf a lot in some cases\n      return typeof thisArg !== 'undefined' ? function (val, i, arr) {\n        return target.call(thisArg, val, i, arr);\n      } : target;\n    case 'object':\n      return function (val) {\n        return deepMatches(val, target);\n      };\n    case 'regexp':\n      return function (str) {\n        return target.test(str);\n      };\n    case 'string':\n    case 'number':\n    default:\n      {\n        return prop(target);\n      }\n  }\n};\nfunction containsMatch(array, value) {\n  var len = array.length;\n  var i = -1;\n  while (++i < len) {\n    if (deepMatches(array[i], value)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction matchArray(arr, value) {\n  var len = value.length;\n  var i = -1;\n  while (++i < len) {\n    if (!containsMatch(arr, value[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction matchObject(obj, value) {\n  for (var key in value) {\n    if (value.hasOwnProperty(key)) {\n      if (deepMatches(obj[key], value[key]) === false) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Recursively compare objects\n */\n\nfunction deepMatches(val, value) {\n  if (typeOf(val) === 'object') {\n    if (Array.isArray(val) && Array.isArray(value)) {\n      return matchArray(val, value);\n    } else {\n      return matchObject(val, value);\n    }\n  } else {\n    return val === value;\n  }\n}\nfunction prop(name) {\n  return function (obj) {\n    return obj[name];\n  };\n}\nfunction noop(val) {\n  return val;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}