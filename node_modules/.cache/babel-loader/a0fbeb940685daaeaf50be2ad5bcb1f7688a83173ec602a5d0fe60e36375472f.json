{"ast":null,"code":"import _slicedToArray from \"C:/Users/91798/Documents/IPMsg/AutoSave/React admin/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat, getMaskFromCurrentFormat } from '../utils/text-field-helper';\nexport var useMaskedInput = function useMaskedInput(_ref) {\n  var _ref$acceptRegex = _ref.acceptRegex,\n    acceptRegex = _ref$acceptRegex === void 0 ? /[\\d]/gi : _ref$acceptRegex,\n    disabled = _ref.disabled,\n    disableMaskedInput = _ref.disableMaskedInput,\n    ignoreInvalidInputs = _ref.ignoreInvalidInputs,\n    inputFormat = _ref.inputFormat,\n    inputProps = _ref.inputProps,\n    label = _ref.label,\n    mask = _ref.mask,\n    onChange = _ref.onChange,\n    rawValue = _ref.rawValue,\n    readOnly = _ref.readOnly,\n    rifmFormatter = _ref.rifmFormatter,\n    TextFieldProps = _ref.TextFieldProps,\n    validationError = _ref.validationError;\n  var utils = useUtils();\n  var formatHelperText = utils.getFormatHelperText(inputFormat);\n  var _React$useMemo = React.useMemo(function () {\n      // formatting of dates is a quite slow thing, so do not make useless .format calls\n      if (disableMaskedInput) {\n        return {\n          shouldUseMaskedInput: false,\n          maskToUse: ''\n        };\n      }\n      var computedMaskToUse = getMaskFromCurrentFormat(mask, inputFormat, acceptRegex, utils);\n      return {\n        shouldUseMaskedInput: checkMaskIsValidForCurrentFormat(computedMaskToUse, inputFormat, acceptRegex, utils),\n        maskToUse: computedMaskToUse\n      };\n    }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]),\n    shouldUseMaskedInput = _React$useMemo.shouldUseMaskedInput,\n    maskToUse = _React$useMemo.maskToUse;\n  var formatter = React.useMemo(function () {\n    return shouldUseMaskedInput && maskToUse ? maskedDateFormatter(maskToUse, acceptRegex) : function (st) {\n      return st;\n    };\n  }, [acceptRegex, maskToUse, shouldUseMaskedInput]); // TODO: Implement with controlled vs uncontrolled `rawValue`\n\n  var parsedValue = rawValue === null ? null : utils.date(rawValue); // Track the value of the input\n\n  var _React$useState = React.useState(parsedValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    innerInputValue = _React$useState2[0],\n    setInnerInputValue = _React$useState2[1]; // control the input text\n\n  var _React$useState3 = React.useState(getDisplayDate(utils, rawValue, inputFormat)),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    innerDisplayedInputValue = _React$useState4[0],\n    setInnerDisplayedInputValue = _React$useState4[1]; // Inspired from autocomplete: https://github.com/mui/material-ui/blob/2c89d036dc2e16f100528f161600dffc83241768/packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js#L185:L201\n\n  var prevRawValue = React.useRef();\n  var prevLocale = React.useRef(utils.locale);\n  var prevInputFormat = React.useRef(inputFormat);\n  React.useEffect(function () {\n    var rawValueHasChanged = rawValue !== prevRawValue.current;\n    var localeHasChanged = utils.locale !== prevLocale.current;\n    var inputFormatHasChanged = inputFormat !== prevInputFormat.current;\n    prevRawValue.current = rawValue;\n    prevLocale.current = utils.locale;\n    prevInputFormat.current = inputFormat;\n    if (!rawValueHasChanged && !localeHasChanged && !inputFormatHasChanged) {\n      return;\n    }\n    var newParsedValue = rawValue === null ? null : utils.date(rawValue);\n    var isAcceptedValue = rawValue === null || utils.isValid(newParsedValue);\n    var innerEqualsParsed = innerInputValue === null ? newParsedValue === null : newParsedValue !== null && Math.abs(utils.getDiff(innerInputValue, newParsedValue, 'seconds')) === 0;\n    if (!localeHasChanged && !inputFormatHasChanged && (!isAcceptedValue || innerEqualsParsed)) {\n      return;\n    } // When dev set a new valid value, we trust them\n\n    var newDisplayDate = getDisplayDate(utils, rawValue, inputFormat);\n    setInnerInputValue(newParsedValue);\n    setInnerDisplayedInputValue(newDisplayDate);\n  }, [utils, rawValue, inputFormat, innerInputValue]);\n  var handleChange = function handleChange(text) {\n    var finalString = text === '' || text === mask ? '' : text;\n    setInnerDisplayedInputValue(finalString);\n    var date = finalString === null ? null : utils.parse(finalString, inputFormat);\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n    setInnerInputValue(date);\n    onChange(date, finalString || undefined);\n  };\n  var rifmProps = useRifm({\n    value: innerDisplayedInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  var inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerDisplayedInputValue,\n    onChange: function onChange(event) {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label: label,\n    disabled: disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled: disabled,\n      placeholder: formatHelperText,\n      readOnly: readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps)\n  }, TextFieldProps);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}