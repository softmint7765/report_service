{"ast":null,"code":"import { getParamNames } from './PatternUtils';\nfunction routeParamsChanged(route, prevState, nextState) {\n  if (!route.path) return false;\n  var paramNames = getParamNames(route.path);\n  return paramNames.some(function (paramName) {\n    return prevState.params[paramName] !== nextState.params[paramName];\n  });\n}\n\n/**\r\n * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by\r\n * the change from prevState to nextState. We leave routes if either\r\n * 1) they are not in the next state or 2) they are in the next state\r\n * but their params have changed (i.e. /users/123 => /users/456).\r\n *\r\n * leaveRoutes are ordered starting at the leaf route of the tree\r\n * we're leaving up to the common parent route. enterRoutes are ordered\r\n * from the top of the tree we're entering down to the leaf route.\r\n *\r\n * changeRoutes are any routes that didn't leave or enter during\r\n * the transition.\r\n */\nfunction computeChangedRoutes(prevState, nextState) {\n  var prevRoutes = prevState && prevState.routes;\n  var nextRoutes = nextState.routes;\n  var leaveRoutes = void 0,\n    changeRoutes = void 0,\n    enterRoutes = void 0;\n  if (prevRoutes) {\n    var parentIsLeaving = false;\n    leaveRoutes = prevRoutes.filter(function (route) {\n      if (parentIsLeaving) {\n        return true;\n      } else {\n        var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);\n        if (isLeaving) parentIsLeaving = true;\n        return isLeaving;\n      }\n    });\n\n    // onLeave hooks start at the leaf route.\n    leaveRoutes.reverse();\n    enterRoutes = [];\n    changeRoutes = [];\n    nextRoutes.forEach(function (route) {\n      var isNew = prevRoutes.indexOf(route) === -1;\n      var paramsChanged = leaveRoutes.indexOf(route) !== -1;\n      if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);\n    });\n  } else {\n    leaveRoutes = [];\n    changeRoutes = [];\n    enterRoutes = nextRoutes;\n  }\n  return {\n    leaveRoutes: leaveRoutes,\n    changeRoutes: changeRoutes,\n    enterRoutes: enterRoutes\n  };\n}\nexport default computeChangedRoutes;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}