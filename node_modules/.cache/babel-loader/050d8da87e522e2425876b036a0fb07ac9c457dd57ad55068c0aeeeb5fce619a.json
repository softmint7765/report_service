{"ast":null,"code":"'use strict';\n\nvar fo = require('../../file-operations');\nvar readStream = require('../../src/read-contents/read-stream');\nfunction writeStream(file, optResolver, onWritten) {\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n  var opt = {\n    mode: file.stat.mode,\n    // TODO: need to test this\n    flags: flags\n  };\n\n  // TODO: is this the best API?\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\n  file.contents.once('error', onComplete);\n  outStream.once('error', onComplete);\n  outStream.once('finish', onComplete);\n\n  // TODO: should this use a clone?\n  file.contents.pipe(outStream);\n  function onComplete(streamErr) {\n    // Cleanup event handlers before closing\n    file.contents.removeListener('error', onComplete);\n    outStream.removeListener('error', onComplete);\n    outStream.removeListener('finish', onComplete);\n\n    // Need to guarantee the fd is closed before forwarding the error\n    outStream.once('close', onClose);\n    outStream.end();\n    function onClose(closeErr) {\n      onWritten(streamErr || closeErr);\n    }\n  }\n\n  // Cleanup\n  function onFlush(fd, callback) {\n    // TODO: removing this before readStream because it replaces the stream\n    file.contents.removeListener('error', onComplete);\n\n    // TODO: this is doing sync stuff & the callback seems unnecessary\n    // TODO: Replace the contents stream or use a clone?\n    readStream(file, complete);\n    function complete() {\n      if (typeof fd !== 'number') {\n        return callback();\n      }\n      fo.updateMetadata(fd, file, callback);\n    }\n  }\n}\nmodule.exports = writeStream;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}