{"ast":null,"code":"'use strict';\n\n// Built-in types\nvar types = ['object', 'number', 'string', 'symbol', 'boolean', 'date', 'function' // Weird to expose this\n];\n\nfunction normalize(coercer, value) {\n  if (typeof value === 'function') {\n    if (coercer === 'function') {\n      return value;\n    }\n    value = value.apply(this, slice(arguments, 2));\n  }\n  return coerce(this, coercer, value);\n}\nfunction coerce(ctx, coercer, value) {\n  // Handle built-in types\n  if (typeof coercer === 'string') {\n    if (coerce[coercer]) {\n      return coerce[coercer].call(ctx, value);\n    }\n    return typeOf(coercer, value);\n  }\n\n  // Handle custom coercer\n  if (typeof coercer === 'function') {\n    return coercer.call(ctx, value);\n  }\n\n  // Array of coercers, try in order until one returns a non-null value\n  var result;\n  coercer.some(function (coercer) {\n    result = coerce(ctx, coercer, value);\n    return result != null;\n  });\n  return result;\n}\ncoerce.string = function (value) {\n  if (value != null && typeof value === 'object' && typeof value.toString === 'function') {\n    value = value.toString();\n  }\n  return typeOf('string', primitive(value));\n};\ncoerce.number = function (value) {\n  return typeOf('number', primitive(value));\n};\ncoerce.boolean = function (value) {\n  return typeOf('boolean', primitive(value));\n};\ncoerce.date = function (value) {\n  value = primitive(value);\n  if (typeof value === 'number' && !isNaN(value) && isFinite(value)) {\n    return new Date(value);\n  }\n};\nfunction typeOf(type, value) {\n  if (typeof value === type) {\n    return value;\n  }\n}\nfunction primitive(value) {\n  if (value != null && typeof value === 'object' && typeof value.valueOf === 'function') {\n    value = value.valueOf();\n  }\n  return value;\n}\nfunction slice(value, from) {\n  return Array.prototype.slice.call(value, from);\n}\n\n// Add methods for each type\ntypes.forEach(function (type) {\n  // Make it an array for easier concat\n  var typeArg = [type];\n  normalize[type] = function () {\n    var args = slice(arguments);\n    return normalize.apply(this, typeArg.concat(args));\n  };\n});\nmodule.exports = normalize;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}