{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nimport React from 'react';\nfunction isValidChild(object) {\n  return object == null || React.isValidElement(object);\n}\nexport function isReactChildren(object) {\n  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);\n}\nfunction createRoute(defaultProps, props) {\n  return _extends({}, defaultProps, props);\n}\nexport function createRouteFromReactElement(element) {\n  var type = element.type;\n  var route = createRoute(type.defaultProps, element.props);\n  if (route.children) {\n    var childRoutes = createRoutesFromReactChildren(route.children, route);\n    if (childRoutes.length) route.childRoutes = childRoutes;\n    delete route.children;\n  }\n  return route;\n}\n\n/**\r\n * Creates and returns a routes object from the given ReactChildren. JSX\r\n * provides a convenient way to visualize how routes in the hierarchy are\r\n * nested.\r\n *\r\n *   import { Route, createRoutesFromReactChildren } from 'react-router'\r\n *\r\n *   const routes = createRoutesFromReactChildren(\r\n *     <Route component={App}>\r\n *       <Route path=\"home\" component={Dashboard}/>\r\n *       <Route path=\"news\" component={NewsFeed}/>\r\n *     </Route>\r\n *   )\r\n *\r\n * Note: This method is automatically used when you provide <Route> children\r\n * to a <Router> component.\r\n */\nexport function createRoutesFromReactChildren(children, parentRoute) {\n  var routes = [];\n  React.Children.forEach(children, function (element) {\n    if (React.isValidElement(element)) {\n      // Component classes may have a static create* method.\n      if (element.type.createRouteFromReactElement) {\n        var route = element.type.createRouteFromReactElement(element, parentRoute);\n        if (route) routes.push(route);\n      } else {\n        routes.push(createRouteFromReactElement(element));\n      }\n    }\n  });\n  return routes;\n}\n\n/**\r\n * Creates and returns an array of routes from the given object which\r\n * may be a JSX route, a plain object route, or an array of either.\r\n */\nexport function createRoutes(routes) {\n  if (isReactChildren(routes)) {\n    routes = createRoutesFromReactChildren(routes);\n  } else if (routes && !Array.isArray(routes)) {\n    routes = [routes];\n  }\n  return routes;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}