{"ast":null,"code":"/*\n ** Â© 2014 by Philipp Dunkel <pip@pipobscure.com>\n ** Licensed under MIT License.\n */\n\n/* jshint node:true */\n'use strict';\n\nif (process.platform !== 'darwin') throw new Error('Module \\'fsevents\\' is not compatible with platform \\'' + process.platform + '\\'');\nvar Native = require(\"bindings\")(\"fse\");\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar inherits = require('util').inherits;\nfunction FSEvents(path, handler) {\n  EventEmitter.call(this);\n  Object.defineProperty(this, '_impl', {\n    value: new Native.FSEvents(String(path || ''), handler),\n    enumerable: false,\n    writable: false\n  });\n}\ninherits(FSEvents, EventEmitter);\nproxies(FSEvents, Native.FSEvents);\nmodule.exports = watch;\nmodule.exports.getInfo = getInfo;\nmodule.exports.FSEvents = Native.FSEvents;\nmodule.exports.Constants = Native.Constants;\nvar defer = global.setImmediate || process.nextTick;\nfunction watch(path) {\n  var fse = new FSEvents(String(path || ''), handler);\n  EventEmitter.call(fse);\n  return fse;\n  function handler(path, flags, id) {\n    defer(function () {\n      fse.emit('fsevent', path, flags, id);\n      var info = getInfo(path, flags);\n      info.id = id;\n      if (info.event === 'moved') {\n        fs.stat(info.path, function (err, stat) {\n          info.event = err || !stat ? 'moved-out' : 'moved-in';\n          fse.emit('change', path, info);\n          fse.emit(info.event, path, info);\n        });\n      } else {\n        fse.emit('change', path, info);\n        fse.emit(info.event, path, info);\n      }\n    });\n  }\n}\nfunction proxies(ctor, target) {\n  Object.keys(target.prototype).filter(function (key) {\n    return typeof target.prototype[key] === 'function';\n  }).forEach(function (key) {\n    ctor.prototype[key] = function () {\n      this._impl[key].apply(this._impl, arguments);\n      return this;\n    };\n  });\n}\nfunction getFileType(flags) {\n  if (Native.Constants.kFSEventStreamEventFlagItemIsFile & flags) return 'file';\n  if (Native.Constants.kFSEventStreamEventFlagItemIsDir & flags) return 'directory';\n  if (Native.Constants.kFSEventStreamEventFlagItemIsSymlink & flags) return 'symlink';\n}\nfunction getEventType(flags) {\n  if (Native.Constants.kFSEventStreamEventFlagItemRemoved & flags) return 'deleted';\n  if (Native.Constants.kFSEventStreamEventFlagItemRenamed & flags) return 'moved';\n  if (Native.Constants.kFSEventStreamEventFlagItemCreated & flags) return 'created';\n  if (Native.Constants.kFSEventStreamEventFlagItemModified & flags) return 'modified';\n  if (Native.Constants.kFSEventStreamEventFlagRootChanged & flags) return 'root-changed';\n  return 'unknown';\n}\nfunction getFileChanges(flags) {\n  return {\n    inode: !!(Native.Constants.kFSEventStreamEventFlagItemInodeMetaMod & flags),\n    finder: !!(Native.Constants.kFSEventStreamEventFlagItemFinderInfoMod & flags),\n    access: !!(Native.Constants.kFSEventStreamEventFlagItemChangeOwner & flags),\n    xattrs: !!(Native.Constants.kFSEventStreamEventFlagItemXattrMod & flags)\n  };\n}\nfunction getInfo(path, flags) {\n  return {\n    path: path,\n    event: getEventType(flags),\n    type: getFileType(flags),\n    changes: getFileChanges(flags),\n    flags: flags\n  };\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}