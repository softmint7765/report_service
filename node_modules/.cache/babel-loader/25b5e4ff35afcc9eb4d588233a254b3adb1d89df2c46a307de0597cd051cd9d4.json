{"ast":null,"code":"'use strict';\n\nvar micromatch = require('micromatch');\nvar normalize = require('normalize-path');\nvar path = require('path'); // required for tests.\nvar arrify = function arrify(a) {\n  return a == null ? [] : Array.isArray(a) ? a : [a];\n};\nvar anymatch = function anymatch(criteria, value, returnIndex, startIndex, endIndex) {\n  criteria = arrify(criteria);\n  value = arrify(value);\n  if (arguments.length === 1) {\n    return anymatch.bind(null, criteria.map(function (criterion) {\n      return typeof criterion === 'string' && criterion[0] !== '!' ? micromatch.matcher(criterion) : criterion;\n    }));\n  }\n  startIndex = startIndex || 0;\n  var string = value[0];\n  var altString, altValue;\n  var matched = false;\n  var matchIndex = -1;\n  function testCriteria(criterion, index) {\n    var result;\n    switch (Object.prototype.toString.call(criterion)) {\n      case '[object String]':\n        result = string === criterion || altString && altString === criterion;\n        result = result || micromatch.isMatch(string, criterion);\n        break;\n      case '[object RegExp]':\n        result = criterion.test(string) || altString && criterion.test(altString);\n        break;\n      case '[object Function]':\n        result = criterion.apply(null, value);\n        result = result || altValue && criterion.apply(null, altValue);\n        break;\n      default:\n        result = false;\n    }\n    if (result) {\n      matchIndex = index + startIndex;\n    }\n    return result;\n  }\n  var crit = criteria;\n  var negGlobs = crit.reduce(function (arr, criterion, index) {\n    if (typeof criterion === 'string' && criterion[0] === '!') {\n      if (crit === criteria) {\n        // make a copy before modifying\n        crit = crit.slice();\n      }\n      crit[index] = null;\n      arr.push(criterion.substr(1));\n    }\n    return arr;\n  }, []);\n  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {\n    if (path.sep === '\\\\' && typeof string === 'string') {\n      altString = normalize(string);\n      altString = altString === string ? null : altString;\n      if (altString) altValue = [altString].concat(value.slice(1));\n    }\n    matched = crit.slice(startIndex, endIndex).some(testCriteria);\n  }\n  return returnIndex === true ? matchIndex : matched;\n};\nmodule.exports = anymatch;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}