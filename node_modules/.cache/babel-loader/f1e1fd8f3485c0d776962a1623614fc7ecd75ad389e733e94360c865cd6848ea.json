{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nimport { loopAsync } from './AsyncUtils';\nvar PendingHooks = function PendingHooks() {\n  var _this = this;\n  _classCallCheck(this, PendingHooks);\n  this.hooks = [];\n  this.add = function (hook) {\n    return _this.hooks.push(hook);\n  };\n  this.remove = function (hook) {\n    return _this.hooks = _this.hooks.filter(function (h) {\n      return h !== hook;\n    });\n  };\n  this.has = function (hook) {\n    return _this.hooks.indexOf(hook) !== -1;\n  };\n  this.clear = function () {\n    return _this.hooks = [];\n  };\n};\nexport default function getTransitionUtils() {\n  var enterHooks = new PendingHooks();\n  var changeHooks = new PendingHooks();\n  function createTransitionHook(hook, route, asyncArity, pendingHooks) {\n    var isSync = hook.length < asyncArity;\n    var transitionHook = function transitionHook() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      hook.apply(route, args);\n      if (isSync) {\n        var callback = args[args.length - 1];\n        // Assume hook executes synchronously and\n        // automatically call the callback.\n        callback();\n      }\n    };\n    pendingHooks.add(transitionHook);\n    return transitionHook;\n  }\n  function getEnterHooks(routes) {\n    return routes.reduce(function (hooks, route) {\n      if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));\n      return hooks;\n    }, []);\n  }\n  function getChangeHooks(routes) {\n    return routes.reduce(function (hooks, route) {\n      if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));\n      return hooks;\n    }, []);\n  }\n  function runTransitionHooks(length, iter, callback) {\n    if (!length) {\n      callback();\n      return;\n    }\n    var redirectInfo = void 0;\n    function replace(location) {\n      redirectInfo = location;\n    }\n    loopAsync(length, function (index, next, done) {\n      iter(index, replace, function (error) {\n        if (error || redirectInfo) {\n          done(error, redirectInfo); // No need to continue.\n        } else {\n          next();\n        }\n      });\n    }, callback);\n  }\n\n  /**\r\n   * Runs all onEnter hooks in the given array of routes in order\r\n   * with onEnter(nextState, replace, callback) and calls\r\n   * callback(error, redirectInfo) when finished. The first hook\r\n   * to use replace short-circuits the loop.\r\n   *\r\n   * If a hook needs to run asynchronously, it may use the callback\r\n   * function. However, doing so will cause the transition to pause,\r\n   * which could lead to a non-responsive UI if the hook is slow.\r\n   */\n  function runEnterHooks(routes, nextState, callback) {\n    enterHooks.clear();\n    var hooks = getEnterHooks(routes);\n    return runTransitionHooks(hooks.length, function (index, replace, next) {\n      var wrappedNext = function wrappedNext() {\n        if (enterHooks.has(hooks[index])) {\n          next.apply(undefined, arguments);\n          enterHooks.remove(hooks[index]);\n        }\n      };\n      hooks[index](nextState, replace, wrappedNext);\n    }, callback);\n  }\n\n  /**\r\n   * Runs all onChange hooks in the given array of routes in order\r\n   * with onChange(prevState, nextState, replace, callback) and calls\r\n   * callback(error, redirectInfo) when finished. The first hook\r\n   * to use replace short-circuits the loop.\r\n   *\r\n   * If a hook needs to run asynchronously, it may use the callback\r\n   * function. However, doing so will cause the transition to pause,\r\n   * which could lead to a non-responsive UI if the hook is slow.\r\n   */\n  function runChangeHooks(routes, state, nextState, callback) {\n    changeHooks.clear();\n    var hooks = getChangeHooks(routes);\n    return runTransitionHooks(hooks.length, function (index, replace, next) {\n      var wrappedNext = function wrappedNext() {\n        if (changeHooks.has(hooks[index])) {\n          next.apply(undefined, arguments);\n          changeHooks.remove(hooks[index]);\n        }\n      };\n      hooks[index](state, nextState, replace, wrappedNext);\n    }, callback);\n  }\n\n  /**\r\n   * Runs all onLeave hooks in the given array of routes in order.\r\n   */\n  function runLeaveHooks(routes, prevState) {\n    for (var i = 0, len = routes.length; i < len; ++i) {\n      if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);\n    }\n  }\n  return {\n    runEnterHooks: runEnterHooks,\n    runChangeHooks: runChangeHooks,\n    runLeaveHooks: runLeaveHooks\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}